{"from":"CIE","year":"2025","month":"03","level":"1","type":"编程题","title":"长方形的周长","description":"编写一个Python程序, 计算长方形的周长(提示: 长方形的周长计算公式为: 周长=2*(长+宽))。要求: (1)程序开始运行后, 输入长方形的长和宽, 输入的数字是整数(可以分两次输入); (2)要求提示语必须有, 提示语为\"长方形的长是: \"和\"长方形的宽是: \"; (3)程序根据长和宽计算输出结果。例如, 输入长: 8, 宽: 10; 输出为\"长方形的周长为: 36\"。","input_format":"两个整数, 分别表示长和宽","output_format":"长方形的周长","sample":[{"input":"8\n10","output":"长方形的周长为: 36"}],"constraints":"长和宽为正整数","solution":"a=int(input(\"请输入长方形的长: \"))\nb=int(input(\"请输入长方形的宽: \"))\nc=2*(a+b)\nprint(\"长方形的周长为: \", c)"}
{"from":"CIE","year":"2025","month":"03","level":"1","type":"编程题","title":"太极图绘制","description":"使用Turtle库画出简易版的太极图。要求: (1)将画笔的粗细设置为5; (2)以坐标(0, 0)为起点, 以120为半径画出最外面的大圆; (3)以坐标(0,0)为起点, 以60为半径画出大圆内靠下方的半圆, 半圆开口向右(提示: 可以用命令turtle.circle(60, -180)来改变半圆开口方向); (4)画完第③步中的半圆后, 接着画出大圆内靠上方的半圆, 半圆的半径为60, 开口向左(提示: 可以通过命令turtle.circle(-60, -180)来改变半圆开口方向); (5)抬起画笔并将画笔移动到坐标为(0,40)的位置, 然后画出大圆内靠下方的小圆, 小圆的半径为20; (6)抬起画笔并将画笔移动到坐标为(0,160)的位置, 然后画出大圆内靠上方的小圆, 小圆的半径为20。","solution":"import turtle\nturtle.pensize(5)\nturtle.circle(120)\nturtle.circle(60, -180)\nturtle.circle(-60, -180)\nturtle.penup()\nturtle.goto(0, 40)\nturtle.pendown()\nturtle.circle(20)\nturtle.penup()\nturtle.goto(0, 160)\nturtle.pendown()\nturtle.circle(20)"}
{"from":"CIE","year":"2025","month":"03","level":"2","type":"编程题","title":"输出字符串中部分字符","description":"编写一段能够输出原字符串中某个字符(如果是多次出现的字符, 则为第一次)出现前所有字符的代码。字符输出的方式不限, 可以一个一个输出, 也可以一起输出; 可以一行一个输出, 也可以输出在一行, 但是必须是指定字符前面的所有字符都要有(包括空格和标点符号)。要求: (1)程序运行开始后, 用户通过键盘输入截止的单个字符(格式为字符串), 提示信息为\"请输入截止字符: \"; (2)必须用循环结构; (3)如果未遇到输入的截止字符, 则直接输出原字符串所有内容; (4)如果遇到输入的截止字符, 则终止循环, 结束程序; (5)原字符串需要在程序中明确, 为\" Reading a good book,  like and many noble people talk\", 程序中直接引用, 无需用户通过键盘输入。(6)对于多次出现的字符, 只需要输出第一次出现截止字符之前的字符; 如: 输入的截止字符为o, 需要输出的字符中必须包含\"Reading a g\"(含空格)才为正确。","input_format":"用户输入一个字符(字符串形式)","output_format":"输出截止字符前的所有字符(可以逐个字符分行输出, 也可以连续输出在一行或多行, 但必须包含所有截止字符前的字符)","sample":[{"input":"a","output":"R\ne"}],"constraints":"原字符串固定为\" Reading a good book,  like and many noble people talk\"","solution":"str=\"Reading a good book,  like and many noble people talk\"\nc=input(\"请输入截止字符: \")\nfor i in str:\n    if i==c:\n        break\n    else:\n        print(i)"}
{"from":"CIE","year":"2025","month":"03","level":"2","type":"编程题","title":"成绩查询","description":"学校老师统计了班级学生的成绩单如下, 成绩是按照学号从1号到20号: 91, 89, 92, 87, 94, 97, 100, 98, 92, 94, 91, 90, 93, 96, 98, 93, 89, 95, 94, 99。请你编写一个成绩查询程序, 输入学生学号, 打印输出该学生的成绩。要求: (1)如果输入的学号在1到20之间(包含1和20), 则输出\"该学生的成绩XX。\"(2)如果输入的学号不在1到20之间, 则输出\"该学号不存在！\"","input_format":"一个整数, 表示学号","output_format":"如果学号存在, 输出\"该学生的成绩为XX。\"(xx为成绩); 如果不存在, 输出\"该学号不存在！\"","sample":[{"input":"1","output":"该学生的成绩为91。"},{"input":"21","output":"该学号不存在！"}],"constraints":"学号是1到20的整数","solution":"cj = [91,89,92,87,94,97,100,98,92,94,91,90,93,96,98,93,89,95,94,99]\nnum = int(input(\"请输入学生学号: \"))\nif num >0 and num<21:\n    print(\"该学生的成绩为\" + str(cj[num-1]) + \".\")\nelse:\n    print(\"该学号不存在！\")"}
{"from":"CIE","year":"2025","month":"03","level":"3","type":"编程题","title":"统计身高","description":"某班学生进行了身高测试, 身高数据存在文件\"shengao.csv\"中。小明编写了程序, 读取身高文件中的数据, 并计算男生的平均身高(保留两位小数), 请补全代码。","input_format":"CSV文件格式, 包含姓名、性别、身高三列","output_format":"男生的平均身高(保留两位小数)","solution":"import csv\nwith open(\"/data/shengao.csv\") as f:\n    rows=list(csv.reader(f))\n    sum=0\n    n=0\n    for row in rows[1:]:\n        if row[1]==\"男\":\n            sum+=int(row[2])\n            n=n+1\n    print(\"男生的平均身高是: \",\"%.2f\"%(sum/n))"}
{"from":"CIE","year":"2025","month":"03","level":"3","type":"编程题","title":"课本分配","description":"某学校由于缺乏课本, 信息课要两人共读一本课本, 数学课要三人共读一本课本, 语文课要四人共读一本课本。书的总数是52本。问信息书、数学书、语文书各有多少本？(每门功课至少要有一本书)","solution":"for i in range(1, 51):\n    for j in range(1, 51):\n        k = 52 - i - j\n        if i*2 == j*3 and j*3==k*4:\n            print('信息书共有%d本, 数学书共有%d本。语文书有%d本' % (i, j, k))"}
{"from":"CIE","year":"2025","month":"03","level":"3","type":"编程题","title":"冒泡排序","description":"下列程序用冒泡排序算法将数列从小到大输出, 请补全代码。","solution":"c=[3,6,11,18,9,12,5,2,22,10]\ncount=len(c)\nfor i in range(0,count-1):\n    for j in range(0,count-1-i):\n        if c[j]>c[j+1]:\n            t=c[j]\n            c[j]=c[j+1]\n            c[j+1]=t\nprint(c)"}
{"from":"CIE","year":"2025","month":"03","level":"4","type":"编程题","title":"米粒问题","description":"阿凡提与国王比赛下棋, 棋盘一共64个小格子, 在第一个格子里放1粒米, 第二个格子里放2粒米, 第三个格子里放4粒米, 第四个格子里放8粒米, 以此类推, 后面每个格子里的米都是前一个格子里的2倍, 需要多少粒米？","solution":"def fun(n):\n    x = 1\n    for i in range(n):\n        x *= 2\n    return x\n\ns = 0\nfor i in range(64):\n    s += fun(i)\nprint(s)"}
{"from":"CIE","year":"2025","month":"03","level":"4","type":"编程题","title":"查字典","description":"字典为1000页, 用二分法翻到具体指定的页码, 补全代码控制循环体运行。","input_format":"一个整数页码(小于1000)","output_format":"需要查找的次数","solution":"x=int(input(\"请输入要查找的页数(小于1000):\"))\nflagleft=1\nflagright=1000\nn=0\nwhile flagleft<=flagright:\n    mid=(flagleft+flagright)//2\n    n=n+1\n    if mid>x:\n        flagright=mid-1\n    elif mid<x:\n        flagleft=mid+1\n    else:\n        break\nprint('需要查找的次数为: ',n)"}
{"from":"CIE","year":"2025","month":"03","level":"4","type":"编程题","title":"蜗牛爬行","description":"一只蜗牛在数字方格上移动, 只能从标号小的方格移动到标号大的相邻方格。计算蜗牛从方格M开始爬到方格N(1<=M<N<=1000)有多少种移动路线。","input_format":"两个整数M和N(1<=M<N<=1000)","output_format":"移动路线的数量","solution":"def woniu(m , n):\n    k = n - m\n    a = [0] * (k+1)\n    a[1]=1\n    a[2]=2\n    for i in range(3,k+1):\n        a[i]=a[i-1]+a[i-2]\n    return a[k]\n\nm = int(input())\nn = int(input())\nprint(woniu(m,n))"}
{"from":"CIE","year":"2025","month":"03","level":"5","type":"编程题","title":"共同的兴趣","description":"实现功能帮助用户找到共同的兴趣爱好。用户可以输入自己的兴趣爱好, 然后系统会将用户输入的兴趣爱好与其他用户的兴趣爱好进行比对, 找出共同的兴趣爱好并统计数量展示给用户。","input_format":"两行用逗号分隔的兴趣爱好","output_format":"共同的兴趣爱好、共同兴趣爱好的数量、所有兴趣爱好的总集合","sample":[{"input":"阅读,旅行,游泳,瑜伽\n游泳,瑜伽,摄影,登山","output":"共同的兴趣爱好:  {'游泳', '瑜伽'}\n共同兴趣爱好的数量:  2\n所有兴趣爱好的总集合:  {'瑜伽', '游泳', '登山', '摄影', '阅读', '旅行'}"}],"solution":"hobbies_a = set(input(\"请输入用户A的兴趣爱好, 用逗号分隔: \").split(','))\nhobbies_b = set(input(\"请输入用户B的兴趣爱好, 用逗号分隔: \").split(','))\ncommon_hobbies = hobbies_a.intersection(hobbies_b)\ncommon_hobbies_count = len(common_hobbies)\nall_hobbies = hobbies_a.union(hobbies_b)\nprint(\"共同的兴趣爱好: \", common_hobbies)\nprint(\"共同兴趣爱好的数量: \", common_hobbies_count)\nprint(\"所有兴趣爱好的总集合: \", all_hobbies)"}
{"from":"CIE","year":"2025","month":"03","level":"5","type":"编程题","title":"完全数","description":"找出500以内的完全数(一个正整数等于除它之外其他所有除数之和)。","solution":"for i in range(1,500):\n    str1=[]\n    for j in range(1,i):\n        if i%j==0:\n            str1.append(j)\n    if i==sum(str1):\n        print(f'{i}是完全数')"}
{"from":"CIE","year":"2025","month":"03","level":"5","type":"编程题","title":"字符串替换","description":"在字符串s中查找指定的字符c1并替换成其他字符c2, 实现类似word的替换功能。","input_format":"文本字符串、要替换的字符、要替换成的新字符","output_format":"替换后的字符串","sample":[{"input":"A person in need is a person indeed!\nperson\nfriend","output":"A friend in need is a friend indeed!"}],"solution":"s = input(\"请输入文本字符串: \")\nc1 = input(\"请输入要替换的字符: \")\nc2 = input(\"请输入要替换成的新字符: \")\nn = len(c1)\ns1 = \"\"\ni = 0\nwhile i < len(s):\n    c = s[i:i+n]\n    if c == c1:\n        s1 = s1+c2\n        i = i+n\n    else:\n        s1 = s1+s[i]\n        i=i+1\nprint(\"替换后的结果: \",s1)"}