{
  "data": {
    "averageCompleteTime": 615.0,
    "subjectList": [
      {
        "id": "3608",
        "version": 0,
        "type": 1,
        "title": "不超过 100个元素的有序数列,使用二分查找能找到指定的元素,可能的查找次数不包括?",
        "optionA": "1次",
        "optionB": "6次",
        "optionC": "7次",
        "optionD": "8次",
        "answer": "D",
        "analyzeContent": "按照二分查找法的规律, 100个元素的有序列表,不管是否找到,至多查找7次.",
        "examDots": "35,",
        "difficultyLevel": "5",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "分治算法",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3609",
        "version": 0,
        "type": 1,
        "title": "运行以下代码,正确的打印结果是? def f(): c=0 for i in range(4,51,4): if i%6==0: c=c+1 return c print(f())",
        "optionA": "1",
        "optionB": "2",
        "optionC": "4",
        "optionD": "8",
        "answer": "C",
        "analyzeContent": "函数 f()的作用是求4-50间4和6的公倍数个数,即12的倍数个数.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3610",
        "version": 0,
        "type": 1,
        "title": "10个人站一列,分苹果,问第10个人分到多少个苹果,他说比前面一个人多分到2个,依次往前,都说比前面一个人多分到2个,最后问第一个人,他说分到10个苹果.用以下函数求第10个人分到的苹果数,则应补充选项为?( ) def  apple(n): if n == 1: return 10 else: return print(apple(10))",
        "optionA": "apple(n)+2",
        "optionB": "n+2",
        "optionC": "apple(n-1)+2",
        "optionD": "apple(n+1)-2",
        "answer": "C",
        "analyzeContent": "def  apple(n): if n == 1: return 10 else: return  apple(n-1)+2 print(apple(10))",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3611",
        "version": 0,
        "type": 1,
        "title": "观察程序段,以下说法错误的是? def fib(n): if n==1 or n==2: s=1 else: s=fib(n-1)+fib(n-2) return s m=int(input(\"请输入m的值(m>2):\")) print(fib(m))",
        "optionA": "如果输入 m的值为8,打印的结果为20",
        "optionB": "该程序段用了递归来实现",
        "optionC": "如果缺少语句 \"return s\",程序会报错",
        "optionD": "语句 \"def fib(n):\"中的n为形参",
        "answer": "A",
        "analyzeContent": "定义函数时的语法如下: def 函数名(参数集合): <函数体> [return 函数值] 本题中的自定义函数 fib(m)需要返回值,所以\"return 函数值\"语句不能少,定义时\"函数名<参数集合>\"中的参数为形参,调用时\"函数名<参数集合>\" 中的参数为实参.如果输入m的值为8,打印的结果为21.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3612",
        "version": 0,
        "type": 1,
        "title": "关于 python函数参数的说法正确的是?",
        "optionA": "函数一定要有参数和返回值",
        "optionB": "在调用一个函数时,若函数中修改了形参变量的值,则对应的实参变量的值也被修改",
        "optionC": "参数的值是否会改变,与函数中对变量的操作有关,与参数类型无关",
        "optionD": "函数的形参在函数被调用时获得初始值",
        "answer": "D",
        "analyzeContent": "函数的形参作用域为本函数,在函数被调用时获得初始值",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3613",
        "version": 0,
        "type": 1,
        "title": "关于递归与递推方法的比较,错误的观点是?",
        "optionA": "递归是将复杂问题降解成若干个子问题,依次降解,求出低阶规模的解,代入高阶问题中,直至求出原问题的解;",
        "optionB": "递推是构造低阶的问题,并求出解,依次推导出高阶的问题以及解,直至求出问题的解;",
        "optionC": "数学上的递推关系可以通过递归的方法来实现;",
        "optionD": "递归算法代码简洁,运行速度比递推快,因此应该尽量采用递归的方法;",
        "answer": "D",
        "analyzeContent": "D.递归的运行开销大.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3614",
        "version": 0,
        "type": 1,
        "title": "运行以下代码,输出结果正确的是? a=1 b=c=[] def fun(a,c): a=2 c.append(a) fun(a,c) print(a,b,c)",
        "optionA": "2 [2] [2]",
        "optionB": "1 [] [2]",
        "optionC": "1 [2] [2]",
        "optionD": "2 [] [2]",
        "answer": "C",
        "analyzeContent": "函数体内变量 a的值为2,添加到了列表c中,b和c指向同一个列表地址,因此列表b也随之改变",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3615",
        "version": 0,
        "type": 1,
        "title": "关于 Turtle库的表述中,错误的是?",
        "optionA": "Turtle库是Python语言中一个很流行的绘制图像的函数库.",
        "optionB": "画布就是 turtle为我们展开用于绘图区域,我们可以设置它的大小和初始位置.",
        "optionC": "turtle.circle( )是只能画一个指定半径为r的圆.",
        "optionD": "turtle.speed(speed):设置画笔移动速度,画笔绘制的速度范围[0,10]整数,数字越大越快",
        "answer": "C",
        "analyzeContent": "turtle.circle( )是turtle中的常用命令,基本语法是circle(radius,e),即画一个指定半径为r,角度e的圆或弧",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "第三方库(模块)的获取,安装与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3616",
        "version": 0,
        "type": 1,
        "title": "有 100枚金币,其中有1枚轻1克的假金币,现在要找出这枚假金币,但身边只有1个没有刻度的天秤.小明先是将金币分成50枚一堆,共两堆称重,在轻的那一堆中又分成两堆,接着在轻的25枚中分成12,12,1三堆称重,若两堆12枚的重量相同,则假币为单独剩下的那一枚,否则在轻的那一堆中继续按照之前的办法称下去,直到找到假金币.请问小明采用的办法与哪个算法有着相似之处?",
        "optionA": "递归",
        "optionB": "分治",
        "optionC": "枚举",
        "optionD": "贪心",
        "answer": "B",
        "analyzeContent": "分治算法就是对一个问题采取各个击破的方法,将一个规模为 N的问题分解为K个规模较小的子问题,这些子问题相互独立且与原问题性质相同.只要求出子问题的解,就可得到原问题的解.",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "分治算法",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3617",
        "version": 0,
        "type": 1,
        "title": "运行以下代码,正确的打印结果是? def f(s): t=0 max=0 for i in s: if i>=\"0\" and i<=\"9\": t=t+1 else: if t>max: max=t t=0 print(max) list=\"123ab45cd6d\" f(list)",
        "optionA": "0",
        "optionB": "1",
        "optionC": "2",
        "optionD": "3",
        "answer": "D",
        "analyzeContent": "本段代码中,函数 f()的作用是求最长的连续数字字符串的长度.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3618",
        "version": 0,
        "type": 1,
        "title": "下列关于函数的描述正确的是?",
        "optionA": "函数是可重复使用的,用来实现单一,或相关联功能的代码段",
        "optionB": "函数中必须 return语句",
        "optionC": "函数好处是模块性,但不能提高代码的利用率",
        "optionD": "函数内容以冒号起始,可以不缩进",
        "answer": "A",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3619",
        "version": 2,
        "type": 1,
        "title": "调用以下函数时,语句 \"s=s+i\"被执行的次数是? def f(): s=0 i=1 while i<10: if i%3==0 or s%2==1: s=s+i i=i+1 print(s)",
        "optionA": "3",
        "optionB": "4",
        "optionC": "5",
        "optionD": "6",
        "answer": "C",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3620",
        "version": 0,
        "type": 1,
        "title": "已知有 n本按照书名拼音排序好的图书,使用对分查找法搜索其中任何一本书,最多查找次数为6次,则n的值可能为?",
        "optionA": "20",
        "optionB": "50",
        "optionC": "80",
        "optionD": "100",
        "answer": "B",
        "analyzeContent": "对规模为 n的数据进行对分查找时,无论是否查找到,至多进行 |log 2 n|+1次(|log 2 n|表示小于等于log 2 n的最大整数),因此2 5 ≤n＜2 6 ,即 32≤n＜64.",
        "examDots": "35,",
        "difficultyLevel": "5",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "分治算法",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3621",
        "version": 0,
        "type": 1,
        "title": "某程序代码设计如下,若输入整数 5,则最终输出的结果为? def fact(x): if x==1: s=1 else: s=fact(x-1)*x return s n=int(input(\"请输入一个大于1的整数:\")) print(fact(n)+fact(n-1))",
        "optionA": "120",
        "optionB": "24120",
        "optionC": "144",
        "optionD": "12024",
        "answer": "C",
        "analyzeContent": "由于 fact(5)=fact(4)*5, fact(4)=fact(3)*4, fact(3)=fact(2)*3, fact(2)=fact(1)*2, fact(1)=1,所以fact(5)+fact(4)=120+24=144.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3622",
        "version": 0,
        "type": 1,
        "title": "用匿名函数方式求两个数中较大的数,下列定义语句格式正确的是?",
        "optionA": "result = lambda 'x,y': y if x> y else x",
        "optionB": "result= lambda x,y: y if x> y else x",
        "optionC": "result= lambda 'x,y': x if x> y else y",
        "optionD": "result= lambda x,y: x if x> y else y",
        "answer": "D",
        "analyzeContent": "匿名函数的定义语法: lambda 参数:表达式语法.先写lambda关键字,然后依次写匿名函数的参数,多个参数中间用逗号连接,然后是一个冒号,冒号后面写返回的表达式.",
        "examDots": "35,",
        "difficultyLevel": "5",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "匿名函数",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3623",
        "version": 0,
        "type": 1,
        "title": "下列程序段的正确运行结果是? def fun(m,n): while m!=n: if m>n: m=m-n else: n=n-m return m print(fun(24,16))",
        "optionA": "4",
        "optionB": "8",
        "optionC": "-8",
        "optionD": "2",
        "answer": "B",
        "analyzeContent": "自定义函数 fun(m,n)的作用是求m,n两个整数的最大公约数.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "自定义函数的创建与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3624",
        "version": 0,
        "type": 1,
        "title": "运行下列程序,输出结果正确的是? def fun(x,y=5): return x*y a=fun(10,10) print(a)",
        "optionA": "100",
        "optionB": "50",
        "optionC": "10",
        "optionD": "运行出错",
        "answer": "A",
        "analyzeContent": "参数的默认值被替换.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3625",
        "version": 0,
        "type": 1,
        "title": "如果需要在某函数内部调用上一层的局部变量,则可以使用( )关键字",
        "optionA": "Local",
        "optionB": "nonlocal",
        "optionC": "global",
        "optionD": "nonglobal",
        "answer": "B",
        "analyzeContent": "仅 B可以调用上一层的局部变量",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "全局变量和局部变量",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3626",
        "version": 0,
        "type": 1,
        "title": "在 Python程序中,设已定义函数op,它有一个整型传值参数,一个字符串型传值参数.设x,y为整型变量,z为字符串型变量,则下列能调用该函数的正确语句是?",
        "optionA": "op",
        "optionB": "op(x,y,z)",
        "optionC": "op x,y",
        "optionD": "op(x+y,z)",
        "answer": "D",
        "analyzeContent": "在调用自定函数时需要用到 \"函数名<参数表>\"的方法,且自定义函数op共有两个参数.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3627",
        "version": 0,
        "type": 1,
        "title": "下列哪个语句段的时间复杂度最低?",
        "optionA": "if n%2==0: x=x*2 else: x=x+2",
        "optionB": "n=1 while n<=100: x=x+2",
        "optionC": "for i in range(100): for j in range(10): x=x+2",
        "optionD": "for i in range(100): for j in range(i): x=x+2",
        "answer": "A",
        "analyzeContent": "时间复杂度按数量级递增顺序为:常数阶,对数阶,线性阶,线性对数阶,平方阶",
        "examDots": "35,",
        "difficultyLevel": "5",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "时间复杂度与空间复杂度",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3628",
        "version": 0,
        "type": 1,
        "title": "下列哪个不是 Python中的内建函数?",
        "optionA": "asc(x)",
        "optionB": "ord(x)",
        "optionC": "chr(x)",
        "optionD": "abs(x)",
        "answer": "A",
        "analyzeContent": "Python中没有asc(x)这个内建函数,ord(x)函数的作用是返回x对应的ASCII值,chr(x)函数的作用是返回x对应的字符,abs(x)函数的作用是返回x的绝对值.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3629",
        "version": 0,
        "type": 1,
        "title": "关于函数的定义语句,以下几项中正确的是?",
        "optionA": "def f(c=2,a,b):",
        "optionB": "def f(a,b=2,c):",
        "optionC": "def f(*c,**d,a,b):",
        "optionD": "def f(a,b,*c,**d):",
        "answer": "D",
        "analyzeContent": "顺序实参必须要放在关键字实参之前,位置参数 *args必须要在关键字参数**kwargs前,否则会程序报错.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3630",
        "version": 0,
        "type": 1,
        "title": "下列关于递归的描述不正确的是?",
        "optionA": "递归函数一定包含条件控制语句",
        "optionB": "递归函数一定包含调用自身的语句",
        "optionC": "在调用自身函数时需要明确的边界终止条件",
        "optionD": "递归算法一般代码简洁,执行效率高,空间复杂度低",
        "answer": "D",
        "analyzeContent": "递归算法一般代码简洁,易于理解,但执行效率较低,空间复杂度高.",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3631",
        "version": 0,
        "type": 1,
        "title": "下列哪个不是 Python第三方库的pip安装方法?",
        "optionA": "使用 pip命令",
        "optionB": "使用 wheel命令",
        "optionC": "集成安装方法",
        "optionD": "文件安装方法",
        "answer": "B",
        "analyzeContent": "第三方库安装",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "第三方库(模块)的获取,安装与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3632",
        "version": 0,
        "type": 1,
        "title": "对于下列递归式子,当 n=4时,F的值是? F(n)=F(n-1)+3    F(1)=2",
        "optionA": "2",
        "optionB": "5",
        "optionC": "11",
        "optionD": "14",
        "answer": "C",
        "analyzeContent": "用递归式子推导得出.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3633",
        "version": 0,
        "type": 3,
        "title": "def add(a, b, c=0): return a+b+c print(add(1, 2, 4)) 这段程序的运行结果为 3.",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "在调用函数时给函数提供了实参时, Python将使用指定的实参值",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3634",
        "version": 0,
        "type": 3,
        "title": "算法复杂度分析的目的是分析算法的效率,以求改进.",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "时间复杂度与空间复杂度",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3635",
        "version": 0,
        "type": 3,
        "title": "sum=0 for i in range(5): sum=sum+i print(sum) 运行以上程序,输出结果是 15.",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3636",
        "version": 0,
        "type": 3,
        "title": "已有函数 def demo(*p):return sum(p),表达式 demo(1, 2, 3, 4) 的值为10.",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3637",
        "version": 0,
        "type": 3,
        "title": "使用 python -m pip install --upgrade pip命令能够升级pip.",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "第三方库(模块)的获取,安装与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3638",
        "version": 0,
        "type": 3,
        "title": "在 python函数中,局部变量不能与全局变量重名.",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "当全局变量和局部变量同名时,首先会找程序内部有没有局部变量,如果有,则调用,如果没有,才会去调用全局变量",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "全局变量和局部变量",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3639",
        "version": 0,
        "type": 3,
        "title": "下列程序段返回的值为 \"Hello!Python\". lst=\"Hello!Python\" def f(): global lst lst=\"Hello!\" return lst f() print(lst)",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "lst=\"Hello!Python\"  #定义全局变量 def f(): global lst     #global关键字的作用是通过局部变量修改全局变量 lst=\"Hello!\" return lst f() print(lst)   #打印全局变量中lst的值",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用,全局变量和局部变量",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3640",
        "version": 0,
        "type": 3,
        "title": "使用分治算法求解,子问题不能重复",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "分治算法的子问题之间不可以包含公共的子问题",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "分治算法",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3641",
        "version": 0,
        "type": 3,
        "title": "设计一个程序来求 x n ( x的几次方)的值,算法思想是:把x n 转换为 x*x n-1 ,而 x n-1 又可以转换为 x*x n-2 ,如此重复下去,直到 x*x 0 ,而 x 0 =1,从而求出了x n 的值.这个程序可以用递归来实现.",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "递归体现了 \"大事化小,小事化了\"的思想,把大问题转换成小问题来解决,且有终止条件,即算法中的到x 0 =1为止.",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3642",
        "version": 0,
        "type": 3,
        "title": "下列程序段能正确打印 1. def f(a,b): a=a+b b=a-b a=a-b return b print(F(1,4))",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "Python中字母区分大小写,所以自定义函数创建和调用时,函数名要一致,否则调用不成功.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "自定义函数的创建与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3643",
        "version": 0,
        "type": 4,
        "title": "利用分治思想,给定一个顺序表,编写一个求出其最大值的程序. 根据上述算法思想,补全下列代码. 输入输出示例:当顺序表是 [22,13,34,4,68,15,5,58,36] ,输出: 68 def fun_max(num=list): return max(num) def fun(num): n = ① if n <= 2: return ② l_list, r_list = num[:n//2], num[n//2:] l_max, r_max = ③ return fun_max( ④ ) if __name__ == \"__main__\": alist = [22,13,34,4,68,15,5,58,36] print(fun(alist))",
        "answer": "<p class=\"MsoNormal\"><b><span class=\"15\"><font face=\"宋体\">参考程序:</font></span></b><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>def fun_max(num=list):</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;return max(num)</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>def fun(num):</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;n = len(num)</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;if n &lt;= 2:</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return fun_max(num)</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;l_list, r_list = num[:n//2], num[n//2:]</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;l_max, r_max = fun(l_list), fun(r_list)</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;return fun_max([l_max, r_max])</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>if __name__ == \"__main__\":</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;alist = [22,13,34,4,68,15,5,58,36]</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;print(fun(alist))</span><span><o:p></o:p></span></p>",
        "analyzeContent": "评分标准: ① len(num) 或等效答案; ( 2 分) ② fun_max(num) 或等效答案; ( 2 分) ③ fun(l_list), fun(r_list) 或等效答案; ( 2 分) ④ [l_max, r_max] 或等效答案;( 2 分)",
        "examDots": "35,",
        "weType": 0,
        "isMySubject": 0,
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3644",
        "version": 0,
        "type": 4,
        "title": "现有 n 个人依次围成一圈玩游戏,从第 1 个人开始报数,数到第 m 个人出局,然后从出局的下一个人开始报数,数到第 m 个人又出局, ... ,如此反复到只剩下最后一个是胜利者.设 n 个人的编号分别为 1 , 2 , ... , n ,打印出局的顺序. 根据上述算法思想,补全下列代码. 输入输出示例:当 n=10 , m=4 ,输出如下: 出局的人是 : 4 出局的人是 : 8 出局的人是 : 2 出局的人是 : 7 出局的人是 : 3 出局的人是 : 10 出局的人是 : 9 出局的人是 : 1 出局的人是 : 6 最后胜利者是 : 5 def fun(n,k): L = list( ① ) if n == 1: return else: x = 0 for i in ② x = ③ - 1 print(' 出局的人是 :',L[x]) del L[x] if x < 0: x = 0 print(' 最后胜利者是 :', ④ ) fun(10,4)",
        "answer": "<p class=\"p\"><b><span class=\"15\"><font face=\"宋体\">参考程序:</font></span></b><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>def fun(n,k):</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp; &nbsp; L = list(range(1,n+1))</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp; &nbsp; if n == 1:</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp; &nbsp; &nbsp; &nbsp; return</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp; &nbsp; else:</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp; &nbsp; &nbsp; &nbsp; x = 0</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp; &nbsp; &nbsp; &nbsp; for i in range(n-1):</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x = (x + k) % len(L) - 1</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; print('出局的人是:',L[x])</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; del L[x]</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if x &lt; 0:</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x = 0</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp; &nbsp; &nbsp; &nbsp; print('最后胜利者是:',L[0])</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>fun(10,4)</span><span><o:p></o:p></span></p>",
        "analyzeContent": "评分标准: ① range(1,n+1) 或等效答案;(3分) ② range(n-1): 或等效答案;(3分) ③ (x + k) % len(L) 或等效答案;(3分) ④ L[0] 或等效答案;(3分)",
        "examDots": "35,",
        "weType": 0,
        "isMySubject": 0,
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3645",
        "version": 0,
        "type": 4,
        "title": "设计一个算法,将一个正整数分解质因数. 程序分析:对 n 进行分解质因数,应先找到一个最小的质数 k ,然后按下述步骤完成: (1) 如果这个质数恰等于 n ,则说明分解质因数的过程已经结束,输出即可. (2) 如果 n>k ,但 n 能被 k 整除,则应打印出 k 的值,并用 n 除以 k 的商 , 作为新的正整数 n ,重复执行第一步. (3) 如果 n 不能被 k 整除,则用 k+1 作为 k 的值,重复执行第一步. 根据上述算法思想,补全下列代码. 输入输出示例:当 n=105 ,输出: 105= 3*5*7 当 n=60 ,输出: 60= 2*2*3*5 def fun(n): print('%d='%n,end=' ') for i in ① : while n!=i: if n>i and ② : print(i,end='*') ③ else: break else: ④ break if __name__ == \"__main__\": while True: num=input(\" 输入一个正整数: \") if not num.isdigit(): break fun(int(num))",
        "answer": "<p class=\"MsoNormal\"><b><span class=\"15\"><font face=\"宋体\">参考程序:</font></span></b><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>def fun(n):</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;print('%d='%n,end=' ')</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;for i in range(2,n+1):</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while n!=i:</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if n&gt;i and n%i==0:</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(i,end='*')</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n=n//i</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(n)</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>if __name__ == \"__main__\":</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;while True:</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num=input(\"<font face=\"宋体\">输入一个正整数:</font><font face=\"Calibri\">\")</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if not num.isdigit():</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break</span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fun(int(num))</span><span><o:p></o:p></span></p>",
        "analyzeContent": "评分标准: ① range(2,n+1) 或等效答案;( 3 分) ② n%i==0 或等效答案;( 3 分) ③ n=n//i 或等效答案;( 2 分) ④ print(n) 或等效答案;( 2 分)",
        "examDots": "35,",
        "weType": 0,
        "isMySubject": 0,
        "answerStatus": 0,
        "compileEnvironment": 0
      }
    ],
    "calculatePercentage": 0.0,
    "completeTime": "1",
    "answerScore": 0.0,
    "title": "202103Python四级真题",
    "averageScore": 11
  },
  "code": 200,
  "msg": "操作成功"
}