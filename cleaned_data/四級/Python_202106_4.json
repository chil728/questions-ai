{
  "data": {
    "averageCompleteTime": 310.0,
    "subjectList": [
      {
        "id": "3758",
        "version": 0,
        "type": 1,
        "title": "对自然数 1 至 n 求和,如果将递推式 f(n)=f(n-1)+n(n>1) 转化成递归函数,则递归出口是?",
        "optionA": "f(1)=1",
        "optionB": "f(1)=0",
        "optionC": "f(0)=1",
        "optionD": "f(0)=0",
        "answer": "A",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3759",
        "version": 0,
        "type": 1,
        "title": "对比两个求等差数列 1+2+ ... +n 的和的程序,其算法效率? 程序 1 : n=int(input()) s=(1+n)*n/2 print(s) 程序 2 : n=int(input()) s=0 for i in range(n+1): s=s+i print(s)",
        "optionA": "程序 1 比程序 2 高",
        "optionB": "程序 2 比程序 1 高",
        "optionC": "一样高",
        "optionD": "不能判断",
        "answer": "A",
        "analyzeContent": "理解算法性能,算法效率概念",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3760",
        "version": 0,
        "type": 1,
        "title": "若以下程序段的运行结果为\" *#*#* \",则空格 (1) , (2) 处填写结果不可能为? def f(n): s=\"\" for i in range(     (1)     ,n): if i % 2==1: s=s+\"*\" else: s=s+\"#\" return s print(f(     (2)     ))",
        "optionA": "3,8",
        "optionB": "3,7",
        "optionC": "9,14",
        "optionD": "1,6",
        "answer": "B",
        "analyzeContent": "当变量 i 为奇数时, s 累计符号\" * \",所以 range 函数的初始值为奇数,又因为总共输出了 5 个符号,所以 range 函数的终值为初始值 +5 .",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3761",
        "version": 0,
        "type": 1,
        "title": "有一对兔子,从出生后第 3 个月起每个月都生一对兔子,小兔子长到第三个月后每个月又生一对兔子.假如兔子都不死,要求输出一年内兔子的数量是多少.如果采用递归算法来编程,则核心的递归逻辑应该是?",
        "optionA": "f(n) =n*f(n-1)",
        "optionB": "f(n) = f(n-1)+n",
        "optionC": "f(n) = f(n-1)+f(n-2)",
        "optionD": "f(n) = f(n-1)+ (n-1)f(n-2)",
        "answer": "C",
        "analyzeContent": "只有 C 是符合题意的递推式.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3762",
        "version": 0,
        "type": 1,
        "title": "下列程序使用了哪种算法? def fact(n): if n==0: return 1 else: return n*fact(n-1)",
        "optionA": "递推",
        "optionB": "递归",
        "optionC": "排序",
        "optionD": "分治",
        "answer": "B",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3763",
        "version": 0,
        "type": 1,
        "title": "以下几项关于函数的说法,错误的是?",
        "optionA": "函数是一段具有特定功能的语句组",
        "optionB": "调用函数时 , 参数传入的顺序必须与定义时保持一致",
        "optionC": "在一个程序中,函数的定义可以放在函数调用代码之后",
        "optionD": "使用函数可以增加代码重复利用率,还可以降低维护难度",
        "answer": "C",
        "analyzeContent": "函数是一段具有特定功能的语句组,使用函数能够提高代码的重复利用率,降低维护难度;调用函数时 , 参数传入的数量,顺序必须与定义时一致;函数必须定义在前,才可以调用.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3764",
        "version": 0,
        "type": 1,
        "title": "下面关于递归的描述不正确的是?",
        "optionA": "递归思想是将大型复杂的问题转化为一个与原问题相似的规模较小的问题来求解",
        "optionB": "递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算,它不是分治策略的具体体现",
        "optionC": "递归必须有终止递归的条件",
        "optionD": "递归是在过程或函数里调用自身",
        "answer": "B",
        "analyzeContent": "递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算,它是分治策略的具体体现",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3765",
        "version": 0,
        "type": 1,
        "title": "下列哪项不是分治算法所具有的特征?",
        "optionA": "该问题的规模缩小到一定的程度就可以容易地解决",
        "optionB": "该问题可以分解为若干个规模较小的不同问题",
        "optionC": "利用该问题分解出的子问题的解可以合并为该问题的解",
        "optionD": "该问题所分解出的各个子问题是相互独立的",
        "answer": "B",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "分治算法",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3766",
        "version": 0,
        "type": 1,
        "title": "以下能正确计算出\" 1 ! +3 ! +5 !\"值( n!=1x2x3 ... xn )的自定义函数是?",
        "optionA": "def f(): s=0 t=1 for i in range(1,6,2): t=t*i s=s+t return s",
        "optionB": "def f(): s=0 t=0 for i in range(1,6,2): t=t*i s=s+t return s",
        "optionC": "def f(): s=0 t=1 for i in range(1,6,2): t=t*i if i%2==1: s=s+t return s",
        "optionD": "def f(): s=0 t=1 for i in range(1,6): t=t*i if i%2==1: s=s+t return s",
        "answer": "D",
        "analyzeContent": "A 选项和 C 选项求的是 1*1+1*1*3+1*1*3*5 的值; B 选项由于 t=0 ,乘以任何数都等于 0 ,所以最终结果为 0 .",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3767",
        "version": 0,
        "type": 1,
        "title": "下面关于递归算法的描述,错误的是?",
        "optionA": "任何递归程序都可以改写成非递归程序",
        "optionB": "定义简单,逻辑清晰",
        "optionC": "算法的执行效率较高",
        "optionD": "原问题与子问题在结构上必须相似",
        "answer": "C",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3768",
        "version": 0,
        "type": 1,
        "title": "下列关于函数的描述正确的是?",
        "optionA": "使用函数的唯一目的是减少代码的重用",
        "optionB": "不带 return 的函数返回值是 None",
        "optionC": "带有默认值的参数可以放在位置参数之前",
        "optionD": "函数可以有多个参数 , 参数之间使用 ; 隔开",
        "answer": "B",
        "analyzeContent": "自定义函数中,可以有返回值, return 语句;也可以没有返回值,不带 return 语句的,返回值是 None",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "自定义函数的创建与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3769",
        "version": 0,
        "type": 1,
        "title": "以下程序是用什么算法思维来显示数列 1 , 4 , 7 , 10 , 13 , 16 ? a=1 for i in range(6): print(a) a+=3",
        "optionA": "递归",
        "optionB": "递推",
        "optionC": "分治",
        "optionD": "枚举",
        "answer": "B",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3770",
        "version": 0,
        "type": 1,
        "title": "运行下列这段程序,正确的输出结果是? def f(a,b): c=a**2+b b=a return c a=5 b=100 c=f(a,b)+b print(c)",
        "optionA": "210",
        "optionB": "225",
        "optionC": "130",
        "optionD": "115",
        "answer": "B",
        "analyzeContent": "函数的形参作用域为本函数,实参变量 b 的值没有改变,还是 100 .",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "形参和实参",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3771",
        "version": 0,
        "type": 1,
        "title": "安装 wheel , wheel 用于离线安装已经下载到本地的 whl 文件,可以在命令窗口直接运行?",
        "optionA": "pip list",
        "optionB": "pip wheel",
        "optionC": "pip unistall wheel",
        "optionD": "pip install wheel",
        "answer": "D",
        "analyzeContent": "知道 pip , wheel , exe 安装方法",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "第三方库(模块)的获取,安装与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3772",
        "version": 0,
        "type": 1,
        "title": "下列选项中,哪个选项调用如下函数会报错? def show(numbers): for n in numbers: print(n)",
        "optionA": "show([4,5,6])",
        "optionB": "show('Chinese')",
        "optionC": "show(3,4)",
        "optionD": "show((4,5,6))",
        "answer": "C",
        "analyzeContent": "调用函数时参数传入,数量必须一致",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3773",
        "version": 0,
        "type": 1,
        "title": "运行下列程序,输出结果正确的是? def demo(lst, k): if k<len(lst): return lst[k:]+lst[:k] lst=[1,2,3,4,5,6] print(demo(lst,4))",
        "optionA": "[4,5,6,1,2,3]",
        "optionB": "[5,6,1,2,3,4]",
        "optionC": "[6,5,4,3,2,1]",
        "optionD": "[1,2,3,4,5,6]",
        "answer": "B",
        "analyzeContent": "运行结果是函数的返回值,返回值为两个列表的合并",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的返回值",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3774",
        "version": 0,
        "type": 1,
        "title": "在解决问题过程中,常用的\"二分法\"是一种什么算法?",
        "optionA": "分治",
        "optionB": "递归",
        "optionC": "推理",
        "optionD": "递推",
        "answer": "A",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "分治算法",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3775",
        "version": 0,
        "type": 1,
        "title": "在 Python Shell 提示符下输入以下哪个选项 , 回车后,再输入 pi ,回车,能得到数值 3.141592653589793 ?",
        "optionA": "import math",
        "optionB": "import math as pi",
        "optionC": "from math import PI",
        "optionD": "from math import *",
        "answer": "D",
        "analyzeContent": "掌握 import 和 from 方式",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "第三方库(模块)的获取,安装与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3776",
        "version": 0,
        "type": 1,
        "title": "下列程序段中自定义函数 do(n) 的作用是? def do(n): s=0 f=1 for i in range(1,n+1,2): s=s+1/i*f f=-f return s print(do(10))",
        "optionA": "求 1+1/2+1/3+1/4+1/5+1/6+1/7+1/8+1/9+1/10 的值",
        "optionB": "求 1+1/3+1/5+1/7+1/9 的值",
        "optionC": "求 1-1/3+1/5-1/7+1/9-1/10 的值",
        "optionD": "求 1-1/3+1/5-1/7+1/9 的值",
        "answer": "D",
        "analyzeContent": "当调用自定义函数 do(10) 时, range ( 1,11,2 )表示生成的序列为 1,3,5,7,9 ,而变量 f 的作用是在 1 和 -1 之间互相转换,所以运算符号\" + \",\" - \"交替出现.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "自定义函数的创建与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3777",
        "version": 0,
        "type": 1,
        "title": "下列几个选项中,不是 Python 定义函数规则的是?",
        "optionA": "def 关键字开头,后接函数名加括号,以冒号结束",
        "optionB": "Python 定义函数时,必须声明形参类型",
        "optionC": "返回值写在 return 后面",
        "optionD": "使用函数名 ( ) 的方式调用函数",
        "answer": "B",
        "analyzeContent": "Python 定义函数的规则:以 def 开头,后接函数名和 ' () :' , 有参数写在 () 中,下一行缩进,如果有返回值则写在 return 后面. Python 定义函数时,不需要声明函数参数的类型",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "自定义函数的创建与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3778",
        "version": 0,
        "type": 1,
        "title": "以下哪项不是使用分治法解决问题的步骤?",
        "optionA": "分解",
        "optionB": "求解",
        "optionC": "合并",
        "optionD": "判断",
        "answer": "D",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "分治算法",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3779",
        "version": 0,
        "type": 1,
        "title": "在 Python 中,调用下面函数的返回值为? def fun(): x=101",
        "optionA": "None",
        "optionB": "101",
        "optionC": "程序报错",
        "optionD": "x=101",
        "answer": "A",
        "analyzeContent": "没有 return 语句的函数,返回值是 None",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "自定义函数的创建与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3780",
        "version": 0,
        "type": 1,
        "title": "下列哪个选项的返回值与其他三项不同?",
        "optionA": "round(3.176)",
        "optionB": "abs(-3)",
        "optionC": "ord('3')",
        "optionD": "len([1,2,3])",
        "answer": "C",
        "analyzeContent": "round(x[,n]) 对 x 进行四舍五入(如果给定 n ,就将数 x 转换为小数点后有 n 位的数),所以 A 选项返回值为 3 . abs(x) 返回 x 的绝对值,所以 B 选项的返回值为 3 . ord(x) 返回 x 对应的 ASCII 值,所以 C 选项的返回值为 51 . len(seq) 返回序列的长度,所以 D 选项的返回值为 3 .",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3781",
        "version": 0,
        "type": 1,
        "title": "下列哪个是正确的函数名?",
        "optionA": "Plan_2021",
        "optionB": "2021plan",
        "optionC": "return",
        "optionD": "10plan10",
        "answer": "A",
        "analyzeContent": "函数的命名规则与变量名一致,由字母,数字和下划线组成,不能以数字开头,字母区分大小写,不能使用 Python 中的关键字,如 return .",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3782",
        "version": 0,
        "type": 1,
        "title": "以下函数的返回值是? def pic(a:int,b:str)->str: c=a*b print(c) return c pic(5, ' *#* ' )",
        "optionA": "*#**#**#**#**#*",
        "optionB": "5",
        "optionC": "5*#*",
        "optionD": "程序出错",
        "answer": "A",
        "analyzeContent": "Python 是动态语言,自定义函数时不需要声明与指定类型,但是在 Python3.5 之后,新增了对函数参数和返回值的类型指定和检查.即使参数输入类型与定义时不一致,实际上运行不会报错, Python 的本质还是动态语言.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的返回值",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3783",
        "version": 0,
        "type": 3,
        "title": "递归方法的运用不仅会简化主程序的设计,也会大大减少程序的代码量.",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "正确.递归能减少程序的代码量",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3784",
        "version": 0,
        "type": 3,
        "title": "在 Python 中定义函数时不需要声明函数的返回值类型.",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3785",
        "version": 0,
        "type": 3,
        "title": "Python 程序是模块化架构,以 .py 的文件可以作为一个模块被引用.一些 Python 爱好者和支持者开发和分享了大量扩展库(包),可以根据需要用包管理器来安装或自定义,体现了 Python 语言强大的扩展性.",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "理解模块化架构和包的管理",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3786",
        "version": 0,
        "type": 3,
        "title": "通常问题的规模越大算法执行的时间就越长,算法执行时间的增长率和问题规模的增长关系,称为空间复杂度.",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "时间复杂度和空间复杂度的概念,本题是时间复杂度的描述,不是空间复杂度.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "时间复杂度与空间复杂度",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3787",
        "version": 0,
        "type": 3,
        "title": "将一个大问题分解为若干子问题,且子问题与大问题是相同的问题,就构成了递归.",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "还需要满足一个条件:不能无限制地调用本身,须有个出口,化简为非递归状况处理.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3788",
        "version": 0,
        "type": 3,
        "title": "将一个大问题分解为若干子问题,且子问题与大问题是相同的问题,就构成了递归.",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "还需要满足一个条件:不能无限制地调用本身,须有个出口,化简为非递归状况处理.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3789",
        "version": 0,
        "type": 3,
        "title": "已知大写字母\" A \"对应的 ASCII 码值为 65 ,变量 ch 保存输入的大写英文字母,则语句 chr((ord(ch)+1-ord(\"A\")) % 26+ord(\"A\")) 能实现大写英文字母后移一位,如 A → B, B → C, ...... Y → Z, Z → A .",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "ord(x) 函数的作用是返回 x 对应的 ASCII 值, chr(x) 函数的作用是返回 x 对应的字符, x%y 表示 x 除以 y 取余数,已知大写英文字母 26 为一循环,所以语句\" chr((ord(ch)+1-ord(\"A\")) % 26+ord(\"A\")) \"能实现大写英文字母后移一位.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3790",
        "version": 0,
        "type": 3,
        "title": "下列程序段运行后,打印结果为 9 . def f(): s=0 for i in range(3,1,-1): if i<=1: x=1 if i<=2: x=2 if i<=3: x=3 s=s+x return s print(f())",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "循环结构中循环变量 i 的值只能取到 3 和 2 .当 i=3 时, x=3 , s=3 ;当 i=2 时, x=3 , s=6 .",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3791",
        "version": 0,
        "type": 3,
        "title": "可以统计字符串,列表,元组,字典等内某元素个数的 Python 内置函数是 index() .",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "可以统计字符串,列表,元组,字典等内某元素个数的 Python 内置函数是 count() .",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3792",
        "version": 0,
        "type": 3,
        "title": "判断下列代码的正确与错误. def f(a,b,c): print(a+b,b,c-a) f(8,b=2,6) 运行上述程序段,结果为 10  2  -2 .",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "本题在调用函数的过程中,实参传递时既有顺序,又有关键字,在两种方式混用时,顺序实参必须放在关键字实参的前面,否则程序会报错.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3793",
        "version": 0,
        "type": 4,
        "title": "质数是一个大于 1 的自然数,除了 1 和它本身外,不能被其他自然数整除.下面的程序设计中,先自定义一个函数,用来判断一个数是否为质数.然后,通过键盘输入一个数,调用所编写的函数,判断该输入的数是否为质数.请根据上述设计思想,完成程序段中划线处的填空. def findprime(m): for i in range(2,m): if _______ ① : return False else: return ________ ② n = int(input(' 请输入一个数 :')) if  _______ ③ : print(\" 该数是质数 .\") else: print(\" 该数不是质数 .\")",
        "answer": "<p class=\"MsoNormal\"><span><font face=\"宋体\">① </font><font face=\"Calibri\">m % i ==0 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font face=\"宋体\">(</font><font face=\"Calibri\">3</font><font face=\"宋体\">分)</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;</span></p><p class=\"MsoNormal\"><span><font face=\"宋体\">② </font><font face=\"Calibri\">True &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font face=\"宋体\">(</font><font face=\"Calibri\">3</font><font face=\"宋体\">分)</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span><font face=\"宋体\">③ </font><font face=\"Calibri\">findprime(n) &nbsp;&nbsp;&nbsp;</font><font face=\"宋体\">(</font><font face=\"Calibri\">4</font><font face=\"宋体\">分)</font></span><span><o:p></o:p></span></p>",
        "analyzeContent": "def findprime(m): for i in range(2,m): if m % i==0: return False else: return True n = int(input(' 请输入一个数 :')) if  findprime(n): print(\" 该数是质数 .\") else: print(\" 该数不是质数 .\")",
        "examDots": "35,",
        "weType": 0,
        "isMySubject": 0,
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3794",
        "version": 0,
        "type": 4,
        "title": "随机生成的 10 个在 [1,100) 范围内整数存入列表;输入一个待查找的整数 k ,运用二分法在列表中查找 k ,根据查找状态输出对应的结果,请将程序补充完整. from random import randint def b(s,v): top=0 last=len(s) while ① _ mid=(top+last)//2 if v==s[mid]: return mid elif v>s[mid]: ② _ elif v<s[mid]: last=mid-1 return None s=[randint(1,100) for i in range(10)] s.sort() print(s) k=int(input()) ans=b(s,k) if ③ _ print(' 找到,下标是: ',ans) else: print(' 没有找到这个数! ') 运行结果 1 : [13, 25, 27, 41, 52, 66, 67, 69, 72, 75] 72 找到,下标是: 8 运行结果 2 : [9, 15, 16, 19, 27, 31, 43, 64, 84, 93] 20 没有找到这个数!",
        "answer": "<p class=\"MsoNormal\"><span><font face=\"宋体\">①</font><font face=\"Calibri\">top&lt;=last:</font><font face=\"宋体\">或等效答案;(</font><font face=\"Calibri\">2</font><font face=\"宋体\">分)</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;</span></p><p class=\"MsoNormal\"><span><font face=\"宋体\">②</font><font face=\"Calibri\">top=mid+1</font><font face=\"宋体\">或等效答案;(</font><font face=\"Calibri\">3</font><font face=\"宋体\">分)</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span><font face=\"宋体\">③</font><font face=\"Calibri\">ans!=None: </font><font face=\"宋体\">或等效答案;(</font><font face=\"Calibri\">3</font><font face=\"宋体\">分)</font></span></p>",
        "analyzeContent": "from random import randint def b(s,v): top=0 last=len(s) while top<=last: mid=(top+last)//2 if v==s[mid]: return mid elif v>s[mid]: top=mid+1 elif v<s[mid]: last=mid-1 return None s=[randint(1,100) for i in range(10)] s.sort() print(s) k=int(input()) ans=b(s,k) if ans!=None: print(' 找到,下标是: ',ans) else: print(' 没有找到这个数! ')",
        "examDots": "35,",
        "weType": 0,
        "isMySubject": 0,
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "3795",
        "version": 0,
        "type": 4,
        "title": "有一群兔子, 4 个 4 个地数余 1 个, 5 个 5 个地数余 2 个, 9 个 9 个地数余 7 个,试问兔子有多少只?(请将程序补充完整) def ① while ② if n%5==2: break n+=9 while True: if ③ break n+=45 print(n) f(16)",
        "answer": "<p class=\"MsoNormal\"><span><font face=\"宋体\">① </font><font face=\"Calibri\">f(n):</font><font face=\"宋体\">或等效答案;(</font><font face=\"Calibri\">4</font><font face=\"宋体\">分)</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span>&nbsp;</span></p><p class=\"MsoNormal\"><span><font face=\"宋体\">② </font><font face=\"Calibri\">True:</font><font face=\"宋体\">或等效答案;(</font><font face=\"Calibri\">4</font><font face=\"宋体\">分)</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\"><span><font face=\"宋体\">③ </font><font face=\"Calibri\">n%4==1:</font><font face=\"宋体\">或等效答案;(</font><font face=\"Calibri\">4</font><font face=\"宋体\">分)</font></span><span><o:p></o:p></span></p>",
        "analyzeContent": "函数相关概念 2 分,自定义函数的创建与调用 10 分 参考答案: def f(n): while True: if n%5==2: break n+=9 while True: if n%4==1: break n+=45 print(n) f(16)",
        "examDots": "35,",
        "weType": 0,
        "isMySubject": 0,
        "answerStatus": 0,
        "compileEnvironment": 0
      }
    ],
    "calculatePercentage": 0.0,
    "completeTime": "1",
    "answerScore": 0.0,
    "title": "202106Python四级真题",
    "averageScore": 7
  },
  "code": 200,
  "msg": "操作成功"
}