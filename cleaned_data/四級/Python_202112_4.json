{
  "data": {
    "averageCompleteTime": 399.0,
    "subjectList": [
      {
        "id": "5502",
        "version": 0,
        "type": 1,
        "title": "Python 中函数不包括?",
        "optionA": "标准函数",
        "optionB": "第三库函数",
        "optionC": "内建函数",
        "optionD": "参数函数",
        "answer": "D",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5503",
        "version": 0,
        "type": 1,
        "title": "以下关于函数参数和返回值的描述,正确的是?",
        "optionA": "关键字传递是根据每个参数的名字传递参数,实参的顺序需要和形参的顺序一致",
        "optionB": "可选参数传递指的是没有传入对应参数值的时候,就不使用该参数",
        "optionC": "函数能同时返回多个值,需要形成一个列表来返回",
        "optionD": "给参数赋予默认值,如果该参数最终没有被传递值,将使用该默认值",
        "answer": "D",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5504",
        "version": 0,
        "type": 1,
        "title": "关于 import 引用,以下选项中描述错误的是?",
        "optionA": "使用 import turtle 引入turtle 库",
        "optionB": "可以使用 from turtle import setup 引入 turtle 库",
        "optionC": "使用 import turtle as t 引入 turtle 库,取别名为 t",
        "optionD": "import 保留字用于导入模块或者模块中的对象",
        "answer": "B",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "算法优化",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5506",
        "version": 0,
        "type": 1,
        "title": "关于算法的描述,以下选项中错误的是?",
        "optionA": "算法是指解题方案的准确而完整的描述",
        "optionB": "算法的复杂度主要包括时间复杂度和数据复杂度",
        "optionC": "算法具有可行性,确定性,有穷性的基本特征",
        "optionD": "算法的基本要素包括数据对象的运算和操作及算法的控制结构",
        "answer": "B",
        "analyzeContent": "算法复杂度是指算法在编写成可执行程序后,运行时所需要的资源,资源包括时间资源和内存资源",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "算法优化",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5507",
        "version": 0,
        "type": 1,
        "title": "变量的作用域是指程序代码所能够访问到该变量的区域,以下表述中哪一个是错误的?",
        "optionA": "在函数内部定义的变量是局部变量",
        "optionB": "在函数外部定义的变量是全局变量",
        "optionC": "在函数外部可以使用函数内部定义的变量",
        "optionD": "在函数内部可以使用函数外部定义的变量",
        "answer": "C",
        "analyzeContent": "在函数内部声明的变量不能在函数外部访问,函数内部声明的变量为局部变量,其作用域仅限于函数内部.有局部变量就有全局变量,全局变量是指在模块范围内的全局变量,其作用域是整个模块.全局变量可以在模块内的函数内部使用,但需要遵循先声明后使用的原则",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "全局变量和局部变量",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5508",
        "version": 0,
        "type": 1,
        "title": "有以下程序,运行程序输出的结果是? x=1 def demo(): x=2 print(x) demo() print(x)",
        "optionA": "1 1",
        "optionB": "2 1",
        "optionC": "1 2",
        "optionD": "2 2",
        "answer": "B",
        "analyzeContent": "在函数内部声明的变量不能在函数外部访问,函数内部声明的变量为局部变量,其作用域仅限于函数内部.有局部变量就有全局变量,全局变量是指在模块范围内的全局变量,其作用域是整个模块.全局变量可以在模块内的函数内部使用,但需要遵循先声明后使用的原则",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "全局变量和局部变量",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5509",
        "version": 0,
        "type": 1,
        "title": "匿名函数是指没有名字的函数,Python中需要使用哪一个表达式来创建匿名函数?",
        "optionA": "function",
        "optionB": "filter",
        "optionC": "lambda",
        "optionD": "global",
        "answer": "C",
        "analyzeContent": "匿名函数是指没有名字的函数,Python中需要使用lambda关键字表达式来创建匿名函数",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "匿名函数",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5510",
        "version": 0,
        "type": 1,
        "title": "函数调用可以分为将实际参数的值传递给形式参数,以及将实际参数引用传递给形式参数,如果实际参数是可变对象,以下关于函数形式参数和实际参数的表述正确的是?",
        "optionA": "值传递可以改变实际参数的值,但是形式参数的值不能改变",
        "optionB": "值传递可以改变形式参数的值,但是实际参数的值不能改变",
        "optionC": "值传递可以同时改变形式参数和实际参数的值",
        "optionD": "值传递既不能改变实际参数的值,也不能改变形式参数的值",
        "answer": "C",
        "analyzeContent": "函数调用可以分为将实际参数的值传递给形式参数,以及将实际参数引用传递给形式参数,如果实际参数是可变对象,值传递可以同时改变形式参数和实际参数的值",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5511",
        "version": 0,
        "type": 1,
        "title": "关于函数,以下选项中描述错误的是?",
        "optionA": "函数是一段具有特定功能的,可重复用的语句组",
        "optionB": "函数能完成特定的功能,对函数的使用不需要了解函数内部实现原理,只要了解函数的输入输出方式即可",
        "optionC": "使用函数的主要目的是降低编程难度和代码重用",
        "optionD": "Python使用del保留字定义一个函数",
        "answer": "D",
        "analyzeContent": "Python使用def保留字定义一个函数",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5512",
        "version": 0,
        "type": 1,
        "title": "在Python中,以下关于函数的描述错误的一项是?",
        "optionA": "默认参数的值可以修改",
        "optionB": "引入了函数式编程的思想,函数本身亦为对象",
        "optionC": "关键字参数在使用时不允许改变参数列表中的参数顺序",
        "optionD": "函数的return语句可以以元组的方式返回多个值",
        "answer": "C",
        "analyzeContent": "关键字参数在使用时没有顺序限制,但是如果参数中有位置参数,关键字参数必须位于位置参数之后",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5513",
        "version": 0,
        "type": 1,
        "title": "关于Python的自定义函数的说法,下列哪个表述是错误的?",
        "optionA": "函数名的命名规则与变量名的命名规则相同",
        "optionB": "如果有多个参数,各参数之间使用\";\"隔开",
        "optionC": "即使函数没有参数,也必须在函数名后面保留一对空的\"()\"",
        "optionD": "函数体相对于自定义函数的关键字必须保持一定的缩进",
        "answer": "B",
        "analyzeContent": "自定义函数名的命名规则与变量名的命名规则相同,如果有多个参数,各参数之间使用\",\"隔开,即使函数没有参数,也必须在函数名后面保留一对空的\"()\",函数体相对于自定义函数的关键字必须保持一定的缩进",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "自定义函数的创建与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5515",
        "version": 0,
        "type": 1,
        "title": "执行以下程序,以下表述中错误的一个是? def demo(a,b): c=a**2+b b=a return c a=10 b=100 c=demo(a,b)+a",
        "optionA": "该函数名称为demo",
        "optionB": "执行该函数后,变量a的值为10",
        "optionC": "执行该函数后,变量b的值为100",
        "optionD": "执行该函数后,变量c的值为200",
        "answer": "D",
        "analyzeContent": "调用后函数返回值局部变量c为200,调用结束时程序返回到调用出,全局变量c=200+10=210",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的返回值",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5516",
        "version": 0,
        "type": 1,
        "title": "调用函数时,使用位置参数接收实际参数,以下表述正确的是?",
        "optionA": "指定的实际参数必须与形式参数的数量一致,位置一致",
        "optionB": "指定的实际参数必须与形式参数的数量一致,位置可以不一致",
        "optionC": "指定的实际参数必须与形式参数的位置一致,数量可以不一致",
        "optionD": "指定的实际参数与形式参数的数量以及位置不需要一致",
        "answer": "A",
        "analyzeContent": "位置参数,有时也称必备参数,指的是必须按照正确的顺序将实际参数传到函数中,换句话说,调用函数时传入实际参数的数量和位置都必须和定义函数时保持一致,否则 Python 解释器会抛出 TypeError 异常,并提示缺少必要的位置参数.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5517",
        "version": 0,
        "type": 1,
        "title": "设有以下函数,运行程序输出的结果是? def demo(a,b): a*=b return a s=demo(5,2) print(s)",
        "optionA": "5",
        "optionB": "10",
        "optionC": "12",
        "optionD": "20",
        "answer": "B",
        "analyzeContent": "函数返回5*2的结果",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5518",
        "version": 0,
        "type": 1,
        "title": "递归算法的执行过程,一般来说,可先后分成以下哪两个阶段?",
        "optionA": "穷举和回归",
        "optionB": "递推和回归",
        "optionC": "穷举和回溯",
        "optionD": "递推和回溯",
        "answer": "B",
        "analyzeContent": "用递归描述的算法通常有这样的特征:为求解规模为N的问题,设法将它分解成一些规模较小的问题,然后从这些小问题的解方便地构造出大问题的解,并且这些规模较小的问题也能采用同样的分解和综合方法,分解成规模更小的问题,并从这些更小问题的解构造出规模稍大问题的解.特别地,当规模N=1时,能直接得到解. 递归算法的执行过程分递推和回归两个阶段.在递推阶段,把较复杂的问题的求解推到比原问题简单一些的问题的求解;在回归阶段,当获得最简单情况的解后,逐级返回,依次获得稍复杂问题的解",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5519",
        "version": 0,
        "type": 1,
        "title": "设某算法的计算时间表示为递推关系式T(n)=T(n-1)+n(n为正整数)及T(0)=1,该算法的时间复杂度为以下哪一项?",
        "optionA": "O(log 2 n)",
        "optionB": "O(nlog 2 n)",
        "optionC": "O(n)",
        "optionD": "O(n 2 )",
        "answer": "D",
        "analyzeContent": "T(n) = T(n-1)+n T(n) = (T(n-2) + n-1) + n T(n) = T(0) .... n-2+ n-1 + n = n * (n+1)/2,当n趋近于无穷大的时候,T(n) =n*n.",
        "examDots": "35,",
        "difficultyLevel": "5",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推,时间复杂度与空间复杂度",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5520",
        "version": 0,
        "type": 1,
        "title": "运行以下程序,正确的打印结果是? def sum1( arg1, arg2 ): total = arg1 + arg2 return total t= sum1( 10, 20 ) print(t)",
        "optionA": "10",
        "optionB": "20",
        "optionC": "30",
        "optionD": "40",
        "answer": "C",
        "analyzeContent": "知识点:自定义函数的创建与调用",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "自定义函数的创建与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5523",
        "version": 0,
        "type": 1,
        "title": "若要求出把a个元素分成b个子集,有多少种可能性,例:function(4,2)返回值为7,则返回值中函数的参数分别为?( ) def function(a,b): if (b == 1 or b == a): return 1 else: return function( )+b*function(a-1,b)",
        "optionA": "(a-1,b-1)",
        "optionB": "(a+1,b-1)",
        "optionC": "(a-1,b+1)",
        "optionD": "(a+1,b+1)",
        "answer": "A",
        "analyzeContent": "知识点:分治算法",
        "examDots": "35,",
        "difficultyLevel": "5",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "分治算法",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5525",
        "version": 0,
        "type": 1,
        "title": "下列属于math库中的数学函数是?",
        "optionA": "time()",
        "optionB": "round()",
        "optionC": "sqrt()",
        "optionD": "random()",
        "answer": "C",
        "analyzeContent": "知识点:第三方库的调用",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "第三方库(模块)的获取,安装与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5527",
        "version": 0,
        "type": 1,
        "title": "运行下列代码,正确的输出结果是? def yang(n): if n == 0: return [1] else: return[([0]+yang(n-1))[i]+(yang(n-1)+[0])[i]  for i in range(n+1) ] print(yang(4))",
        "optionA": "[1,4,6,4,1]",
        "optionB": "[1,5,10,10,5,1]",
        "optionC": "[1,1,1]",
        "optionD": "[1,3,3,1]",
        "answer": "A",
        "analyzeContent": "知识点:递归与递推",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5528",
        "version": 0,
        "type": 1,
        "title": "下列程序段的运行结果为? def f(n): if n<=0: return 1 else: return f(n-1)*3 print(f(4))",
        "optionA": "9",
        "optionB": "27",
        "optionC": "81",
        "optionD": "243",
        "answer": "C",
        "analyzeContent": "f(4)=f(3)*3=f(2)*3*3=f(1)*3*3*3=f(0)*3*3*3*3=1*81=81",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5529",
        "version": 0,
        "type": 1,
        "title": "以下函数要实现3的阶乘,则应补充选项为? def func(m): if(___): return func(m+1)*m else: return 1 print(func(1))",
        "optionA": "m<3",
        "optionB": "m<=3",
        "optionC": "m<=4",
        "optionD": "m<=2",
        "answer": "B",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5530",
        "version": 0,
        "type": 1,
        "title": "对于数列1,2,8,11,15,17,19,25,30,45,采用\"二分查找\"法查找11,需要查找多少次?",
        "optionA": "5",
        "optionB": "4",
        "optionC": "3",
        "optionD": "2",
        "answer": "B",
        "analyzeContent": "按二分查找法的规律,每次先查找中间值,进行比较",
        "examDots": "35,",
        "difficultyLevel": "5",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "分治算法",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5531",
        "version": 0,
        "type": 1,
        "title": "下面哪种算法使用了分治的方法?",
        "optionA": "冒泡排序",
        "optionB": "选择排序",
        "optionC": "插入排序",
        "optionD": "对分查找",
        "answer": "D",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "分治算法",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5532",
        "version": 0,
        "type": 1,
        "title": "关于递归函数出口的说明,以下选项中错误的是?",
        "optionA": "递归函数的出口决定递归的深度",
        "optionB": "每个递归函数都只能有一个递归出口",
        "optionC": "递归函数必须有出口",
        "optionD": "递归函数的出口不再进行递归",
        "answer": "B",
        "analyzeContent": "递归函数的出口必须有一个及以上.比如斐波拉契数列,它的递归出口有两个f(1)=1,f(2)=1",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5533",
        "version": 1,
        "type": 3,
        "title": "运行如下图的代码,将不会报错而打印出数字7.请判断对错!",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "这题考查学生对函数\"关键字调用\"的理解,有意多加了变量a,干扰学生思维.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5534",
        "version": 1,
        "type": 3,
        "title": "如下图代码,最后运行结果将会打印出数值6,请问对吗?",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "最基本的递推,循环3次,每次累加2,答案为6,正确",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5535",
        "version": 0,
        "type": 3,
        "title": "如果在printnum(number)函数内部想要使用全局变量value,那么就要在函数内部使用关键词global声明全局变量value. value = 10 def printnum(number): global value num = number + value return num",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "在函数内部通过global关键字,通过局部变量修改全局变量的值",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "全局变量和局部变量",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5537",
        "version": 0,
        "type": 3,
        "title": "执行以下代码: def fun(): x=15 print(x) 程序输出的结果为15",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5538",
        "version": 0,
        "type": 3,
        "title": "执行以下代码: def funct(): print(\"I love\") def funct_1(): print(\"Python\") funct() 程序输出的结果为:I lovePython",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5539",
        "version": 0,
        "type": 3,
        "title": "执行以下代码: Func(2,3) def Func(a,b): z=a*b return z 程序返回结果为:6",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5540",
        "version": 0,
        "type": 3,
        "title": "执行以下代码: def add(sum,x): if sum<10: x +=2 sum=sum+x add(sum,x) return sum print (add(0,0)) 程序输出的结果为:2",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5542",
        "version": 0,
        "type": 3,
        "title": "执行以下代码: def fun(m): if len(m)==1: return m[0] mid=len(m)//2 l=fun(m[:mid]) r=fun(m[mid:]) return l+r m=[5,23,41,3,11] print(fun(m))程序输出的结果为:42",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5543",
        "version": 0,
        "type": 3,
        "title": "假设一个一维列表中有200个元素,列表中的元素都已经按降序排列,若采用二分搜索策略查找某一个元素,则最多需要8次比较就能确定是否存在所查找的元素.",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "5",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "分治算法",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5545",
        "version": 0,
        "type": 3,
        "title": "当你安装的第三方库有一个或者多个依赖时,我们可以选择自动安装,直接运行 pip install xxx (xxx为你要安装库的名字)",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "第三方库(模块)的获取,安装与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5547",
        "version": 0,
        "type": 4,
        "title": "要求 :设计一个算法,求1~n(n为大于2的正整数)中有哪些素数,总共是多少个素数? 根据上述计算规则,补全下列代码. 函数名:getPrime(n) 参数表:n -- n为大于2的正整数. 返回值:返回素数组成的数组. 示例:当n=9时,返回:您输入的区间1-n中素数分别是:[2, 3, 5, 7],总共是4个素数! primeList = [] import math def getPrime(n): for x in range(2,n+1): x_sqrt =   ① for prime in primeList: if   ② primeList.append(x) break if   ③ break else: primeList.append(x) return primeList m=int(input(\"请您输入一个整数n:\")) print('您输入的区间1-n中素数分别是:'+  ④    )+',总共是'+str(len(primeList))+'个素数!')",
        "answer": "<p><span><strong>参考程序:</strong></span></p><p><span>primeList = []</span></p><p><br><span>import math</span><br><span>def getPrime(n):</span><br><span>&nbsp; &nbsp; for x in range(2,n+1):</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; x_sqrt = math.sqrt(x)</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; for prime in primeList:</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if prime &gt; x_sqrt:</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; primeList.append(x)</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if x%prime==0:</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; else:</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; primeList.append(x)</span><br><span>&nbsp; &nbsp; return primeList</span><br><br><span>m=eval(input(\"请您输入一个整数n:\"))</span><br><span>print('您输入的区间1-n中素数分别是:'+str(getPrime(m))+',总共是'+str(len(primeList))+'个素数!')</span></p>",
        "analyzeContent": "评分标准: ① math.sqrt(x) 或等效答案;(4分) ② prime > x_sqrt: 或等效答案;(3分) ③ x%prime==0: 或等效答案;(3分) ④ str(getPrime(m)) 或等效答案;(2分)",
        "examDots": "35,",
        "weType": 0,
        "isMySubject": 0,
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5548",
        "version": 0,
        "type": 4,
        "title": "编写上交作业的程序,老师要求把小组7位同学(编号为1,2,3,...,6,7)的作业收齐,小组编号1的同学跟编号2的同学说\"收作业了\",之后每位同学依次向后面的一位同学说要\"收作业了\",直到最后,编号7的同学将自己的作业,上交到编号6的同学手中,编号6的同学将编号7的作业及自己的作业一起上交到编号5的同学,按这样的流程;直到编号1将其他同学的作业及自己的作业上交到老师中.要求编号7同学的作业放在最前面,即老师看到的作业是编号7的作业,然后是编号6的作业,最后是编号1的作业. 根据上述算法思想,编写自定义函数完成程序功能,完善空白处代码. \"\"\" 函数名def getHomeWork(hw,n) 参数表:hw存储每位同学的作业信息,n表示第n位同学的作业 返回值:每位同学的作业,要求最后1位同学的作业显示在最前面,第1位同学作业显示在最后面 \"\"\" def getHomeWork(hw,n): if n ==  ①  : return   ② return   ③ homew=[\"作业1\",\"作业2\",\"作业3\",\"作业4\",\"作业5\",\"作业6\",\"作业7\"] zuoye = getHomeWork(homew,0) print(zuoye)",
        "answer": "<p><span><strong>评分标准</strong></span><br><span>①len(hw)-1 (3分)</span><br><span>②hw[len(hw)-1]&nbsp; (3分)</span><br><span>③getHomeWork(hw,n+1)+hw[n]&nbsp; (4分)</span></p>",
        "analyzeContent": "def getHomeWork(hw,n): if n == len(hw)-1: return hw[len(hw)-1] return getHomeWork(hw,n+1)+hw[n] homew=[\"作业1\",\"作业2\",\"作业3\",\"作业4\",\"作业5\",\"作业6\",\"作业7\"] zuoye = getHomeWork(homew,0) print(zuoye)",
        "examDots": "35,",
        "weType": 0,
        "isMySubject": 0,
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "5549",
        "version": 0,
        "type": 4,
        "title": "要求 :设计一个算法,枚举排列问题.输入1-n的第1个排列,如1 2 3,按照大小输出1~n的所有排列,并统计全部排列总数. 根据上述算法思想,补全下列代码. 描述:输入1-n的第1个排列,如1 2 3,按照大小输出1~n的所有排列. 函数名:perm(n,begin,end) 参数表:n -- 整数n,begin -- 指向排列的第一个元素,end-- 指向排列的最后一个元素. 返回值:输出1-n的所有排列方式,每行一个排列,按从小到大. 示例:当输入1 2 3时,返回: [1, 2, 3] [1, 3, 2] [2, 1, 3] [2, 3, 1] [3, 2, 1] [3, 1, 2] 排列总数是:6个! COUNT=0 def perm(n,begin,end): global COUNT if   ① print (n) COUNT +=1 else: i=begin for num in   ②    : n[num],n[i]=n[i],n[num] ③ n[num],n[i]=n[i],n[num] arr = input(\"1-n的第1个排列:\") n = [int(n) for n in arr.split()] ④ print (\"排列总数是:%d个!\"% COUNT)",
        "answer": "<p><span><strong>参考程序:</strong></span></p><p>COUNT=0</p><p><span>def perm(n,begin,end):</span><br><span>&nbsp; &nbsp; global COUNT</span><br><span>&nbsp; &nbsp; if begin&gt;=end:</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; print (n)</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; COUNT +=1</span><br><span>&nbsp; &nbsp; else:</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; i=begin</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; for num in range(begin,end):</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; n[num],n[i]=n[i],n[num]</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; perm(n,begin+1,end)</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; n[num],n[i]=n[i],n[num]</span><br><span>&nbsp;</span><br><span>arr = input(\"1-n的第1个排列:\")&nbsp; &nbsp;&nbsp;</span><br><span>n = [int(n) for n in arr.split()]</span><br><span>perm(n,0,len(n))</span><br><span>print (\"排列总数是:%d个!\"% COUNT)</span></p>",
        "analyzeContent": "评分标准: ① begin>=end: 或等效答案;(2分) ② range(begin,end) 或等效答案;(2分) ③ perm(n,begin+1,end) 或等效答案;(2分) ④ perm(n,0,len(n)) 或等效答案;(2分)",
        "examDots": "35,",
        "weType": 0,
        "isMySubject": 0,
        "answerStatus": 0,
        "compileEnvironment": 0
      }
    ],
    "calculatePercentage": 0.0,
    "completeTime": "1",
    "answerScore": 0.0,
    "title": "202112Python四级真题",
    "averageScore": 11
  },
  "code": 200,
  "msg": "操作成功"
}