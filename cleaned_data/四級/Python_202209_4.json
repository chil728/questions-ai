{
  "data": {
    "averageCompleteTime": 522.0,
    "subjectList": [
      {
        "id": "7580",
        "version": 0,
        "type": 1,
        "title": "下列不是评判一个算法优劣的标准是?( )",
        "optionA": "时间复杂度",
        "optionB": "空间复杂度",
        "optionC": "难易度",
        "optionD": "健壮性",
        "answer": "C",
        "analyzeContent": "评价算法的优劣是:时间复杂度,空间复杂度,健壮性,正确性,可读性.因此选C.",
        "examDots": "35,",
        "difficultyLevel": "5",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念,时间复杂度与空间复杂度",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7584",
        "version": 0,
        "type": 1,
        "title": "某自定义函数中使用了3个变量,其中2个变量都指定了默认值,调用该函数时,参数的个数最少为几个?( )",
        "optionA": "0",
        "optionB": "2",
        "optionC": "3",
        "optionD": "1",
        "answer": "D",
        "analyzeContent": "在调用函数时,如果用户不传递或者少传递参数,则会采用默认值.2个变量有默认值,还有1个变量没有实际参数值,所以至少传递1个.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7585",
        "version": 0,
        "type": 1,
        "title": "Python中用于字符与其ASCII码相互转换的内置函数是?( )",
        "optionA": "float() abs()",
        "optionB": "pow() format()",
        "optionC": "ord() chr()",
        "optionD": "round() import()",
        "answer": "C",
        "analyzeContent": "用于ASCII码相互转换的内置函数.",
        "examDots": "35,",
        "difficultyLevel": "5",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "算法优化",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7586",
        "version": 0,
        "type": 1,
        "title": "Python中,可以将数字类字符串转换成整数的函数是?( )",
        "optionA": "int( )",
        "optionB": "float( )",
        "optionC": "bool( )",
        "optionD": "class( )",
        "answer": "A",
        "analyzeContent": "Python将数字类字符串转换成整数的函数是int.",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "算法优化",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7588",
        "version": 0,
        "type": 1,
        "title": "运行下列这段程序,正确的输出结果是?( ) LS = [\"apple\", \"red\", \"orange\"] def funb(a): LS.append(a) funb(\"yellow\") print(LS)",
        "optionA": "[\"apple\",\"red\",\"orange\"]",
        "optionB": "[\"apple\",\"red\",\"orange\",\"yellow\"]",
        "optionC": "[]",
        "optionD": "[\"yellow\"]",
        "answer": "B",
        "analyzeContent": "该函数作用是添加列表元素.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7595",
        "version": 0,
        "type": 1,
        "title": "下列代码的输出结果是?( ) def func(a, b): c=a**2+b b=a return c a=10 b=2 c=func(b,a)+a print(c,b)",
        "optionA": "102 2",
        "optionB": "24 10",
        "optionC": "24 2",
        "optionD": "102 10",
        "answer": "C",
        "analyzeContent": "函数形参和实参.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "形参和实参",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7597",
        "version": 0,
        "type": 1,
        "title": "下列关于函数返回值的描述正确的是?( )",
        "optionA": "函数可以没有返回值,也可以有一个或多个返回值",
        "optionB": "函数定义中最多含有一个return语句",
        "optionC": "在函数定义中用return语句时,至少给一个返回值",
        "optionD": "函数中 return语句只能放在函数定义的最后",
        "answer": "A",
        "analyzeContent": "Python函数可以没有返回值.",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的返回值",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7602",
        "version": 0,
        "type": 1,
        "title": "运行下列这段程序,正确的输出结果是?( ) def reverseA(s): t=\"\" for i in range(0,len(s)): t=s[i]+t return t print(reverseA(\"reverse\"))",
        "optionA": "esrever",
        "optionB": "reverse",
        "optionC": "rsereve",
        "optionD": "rseveer",
        "answer": "A",
        "analyzeContent": "依次读取字符串,倒置字符串内容",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "算法优化",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7604",
        "version": 0,
        "type": 1,
        "title": "下列导入pandas模块的方法不正确的是?( )",
        "optionA": "import pandas",
        "optionB": "import pandas as p",
        "optionC": "import pandas *",
        "optionD": "from pandas import *",
        "answer": "C",
        "analyzeContent": "from pandas import *是正确的.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "第三方库(模块)的获取,安装与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7606",
        "version": 0,
        "type": 1,
        "title": "Python中提供了大量的标准库模块,比如利用time模块可以获取计算机的时钟信息,包括日期和时间,若想要实现延时1分钟,则应该使用的语句是?( )",
        "optionA": "sleep(3600)",
        "optionB": "time.time(60)",
        "optionC": "time.asctime(1)",
        "optionD": "time.sleep(60)",
        "answer": "D",
        "analyzeContent": "Python调用函数的格式.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7609",
        "version": 0,
        "type": 1,
        "title": "使用分治算法的基本步骤是?( )",
        "optionA": "分解,解决,合并",
        "optionB": "分解,解决",
        "optionC": "合并,解决",
        "optionD": "合并,解决,分解",
        "answer": "A",
        "analyzeContent": "使用分治算法的基本步骤是分解,解决,合并.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "分治算法",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7610",
        "version": 0,
        "type": 1,
        "title": "二分查找法是运用哪种策略实现的算法?( )",
        "optionA": "分治法",
        "optionB": "贪心法",
        "optionC": "回溯法",
        "optionD": "动态规划法",
        "answer": "A",
        "analyzeContent": "二分查找法,也叫折半查找法.每次都通过跟区间的中间元素对比,将待查找的区间缩小为之前的一半,直到找到要查找的元素.属于分治算法的思想.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "分治算法",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7611",
        "version": 0,
        "type": 1,
        "title": "下列程序是分治算法的典型应用,其运行结果是?( ) def dividAndConquer(arr,left,right): if (right == left + 1) or (right == left): return max(arr[left],arr[right]) mid = int((left + right) / 2) leftMax = dividAndConquer(arr,left,mid) rightMax = dividAndConquer(arr,mid,right) return max(leftMax,rightMax) arr1 = [8, 1, 14, 19, 5] print(dividAndConquer(arr1,0,4))",
        "optionA": "1",
        "optionB": "19",
        "optionC": "8",
        "optionD": "5",
        "answer": "B",
        "analyzeContent": "分治算法求数组最大元素的值.",
        "examDots": "35,",
        "difficultyLevel": "5",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "分治算法",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7612",
        "version": 0,
        "type": 1,
        "title": "列程序输出的结果是?( ) def change(a,b): a=10 b+=a a=4 b=5 change(a,b) print(a,b)",
        "optionA": "4 5",
        "optionB": "10 5",
        "optionC": "4 15",
        "optionD": "10 15",
        "answer": "A",
        "analyzeContent": "函数内为局部变量,所以主程序的a,b值并未改变.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "全局变量和局部变量",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7613",
        "version": 0,
        "type": 1,
        "title": "下列程序运行的结果是?( ) def a(): print(\"here\") b() a() def b(): print(\"there\") a() b()",
        "optionA": "出错",
        "optionB": "死循环",
        "optionC": "here",
        "optionD": "here there",
        "answer": "A",
        "analyzeContent": "第一次调用b的时候,b还未被定义.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7614",
        "version": 0,
        "type": 1,
        "title": "设函数f定义如下:",
        "optionA": "f(,2)",
        "optionB": "f(1,2)",
        "optionC": "f(1)",
        "optionD": "f(1,)",
        "answer": "A",
        "analyzeContent": "不指定形参名称的话,参数只能省略后面的.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "形参和实参",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7616",
        "version": 0,
        "type": 1,
        "title": "下列程序段运行的结果是?( ) def check(x = 2,y = 3): print(x,y) check(y=6,x=5)",
        "optionA": "5 6",
        "optionB": "6 5",
        "optionC": "2 3",
        "optionD": "3 2",
        "answer": "A",
        "analyzeContent": "按形参名称传递参数.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "形参和实参",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7619",
        "version": 0,
        "type": 1,
        "title": "def AddApple(fruit=None): if fruit is None: fruit=[] fruit.append('Apple') return fruit AddApple() AddApple() print(AddApple(['Pear'])) 以上程序段运行的结果是?( )",
        "optionA": "['Pear','Apple']",
        "optionB": "['Pear','Apple','Apple']",
        "optionC": "['Apple','Pear','Apple','Apple']",
        "optionD": "['Apple']",
        "answer": "A",
        "analyzeContent": "第一,二次调用AddApple,虽然都会返回值,但并没有对返回值做任何处理. 第三次调用AddApple,程序直接用print语句把返回值输出.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念,自定义函数的创建与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7622",
        "version": 0,
        "type": 1,
        "title": "def ThankYou(name): print(\"感谢%s对公司的贡献!\" %name) ThankYou('张三') ThankYou() 以上程序运行的结果是?( )",
        "optionA": "打印输出:感谢张三对公司的贡献!",
        "optionB": "打印输出: 感谢张三对公司的贡献! 感谢对公司的贡献!",
        "optionC": "无法输出.",
        "optionD": "需要增加main函数才能正确运行.",
        "answer": "A",
        "analyzeContent": "ThankYou第一次正常调用,第二次没带参数,所以报错.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7625",
        "version": 0,
        "type": 1,
        "title": "编写程序计算1+1/2+1/3+......+1/n的结果,可以使用哪种调用函数自身的算法?( )",
        "optionA": "枚举",
        "optionB": "递归",
        "optionC": "解析",
        "optionD": "分治",
        "answer": "B",
        "analyzeContent": "递归算法的基本思想",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7626",
        "version": 0,
        "type": 1,
        "title": "用下面的程序求解计算s=1+3+5+7+9的值,请选择横线处应填写的代码?( ) def Sum(n): if n<=1: return 1 else: return ________ print(Sum(9))",
        "optionA": "n+Sum(n-1)",
        "optionB": "n+Sum(n+1)",
        "optionC": "n+Sum(n+2)",
        "optionD": "n+Sum(n-2)",
        "answer": "D",
        "analyzeContent": "算式的步长为2.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7627",
        "version": 0,
        "type": 1,
        "title": "下列选项中,哪一项不是递归函数必须要具备的条件?( )",
        "optionA": "明确的边界条件",
        "optionB": "边界值",
        "optionC": "循环语句",
        "optionD": "终止条件",
        "answer": "C",
        "analyzeContent": "递归函数中不一定有循环语句.",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7628",
        "version": 0,
        "type": 1,
        "title": "用递归算法实现5的阶乘,则下方的程序中横线上需要的代码是?( )def func(n): if n<_______: return func(n+1)*n else: return 1print(func(1))",
        "optionA": "4",
        "optionB": "5",
        "optionC": "6",
        "optionD": "7",
        "answer": "C",
        "analyzeContent": "if的判断表达式为n<a+1时,程序才能执行到n=a的情况.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7629",
        "version": 0,
        "type": 1,
        "title": "执行以下代码,程序的输出结果是?( ) def weight(n): if n==1: return 100 else: return weight(n-1) +10 print(weight(3))",
        "optionA": "100",
        "optionB": "110",
        "optionC": "120",
        "optionD": "130",
        "answer": "C",
        "analyzeContent": "100+10+10",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7630",
        "version": 0,
        "type": 1,
        "title": "以下关于递归与递推的说法,错误的是?( )",
        "optionA": "递归算法不涉及高深的数学知识,比较容易理解.",
        "optionB": "递归过程一般通过函数或子过程来实现.",
        "optionC": "递归算法是递推分解问题,然后再将最简单情况的解回归成大问题的解.",
        "optionD": "存在既可以用递归算法解决,也可以用递推算法解决的问题.",
        "answer": "A",
        "analyzeContent": "递归算法虽然不涉及高深的数学知识,但是递归思想和模型并不容易理解.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7631",
        "version": 0,
        "type": 3,
        "title": "函数中return语句只能放在函数定义的最后.( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "return语句只要在函数体内都可以,一旦执行,退出函数体.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的返回值",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7633",
        "version": 0,
        "type": 3,
        "title": "Python定义函数时如果没有参数,也不能省略后面的空括号.( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "Python定义函数时空括号不可以省略.",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7634",
        "version": 0,
        "type": 3,
        "title": "函数的参数分为形参和实参两种,函数调用中实参和形参的值可以互相传递.( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "函数调用时,实参和形参之间的数据是单向的值传递,实参传递给形参是单向传递.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "形参和实参",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7635",
        "version": 0,
        "type": 3,
        "title": "导入模块中指定成员时,可采用的语句是:import  成员名1,成员名2   from  模块名.( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "导入模块中指定成员时,可采用的语句是:from  模块名    import   成员名1,成员名2",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "第三方库(模块)的获取,安装与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7636",
        "version": 0,
        "type": 3,
        "title": "二分搜索,快速排序可以使用分治算法进行求解.( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "二分搜索,快速排序是分治算法的典型案例.",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "分治算法",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7637",
        "version": 0,
        "type": 3,
        "title": "调用带有默认值参数的函数时,不能为默认值参数传递任何值,只能使用函数定义时设定的默认值.( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "调用带有默认值参数的函数时,可以为默认值参数传递其它值.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7639",
        "version": 0,
        "type": 3,
        "title": "在Python中,可以在自定义函数中再定义函数.( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "函数可以嵌套",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "自定义函数的创建与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7640",
        "version": 0,
        "type": 3,
        "title": "在定义一个函数时,如果出现调用自身的成分,则称为递推.( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "调用自身的成分是递归的特征.",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7647",
        "version": 0,
        "type": 3,
        "title": "递归算法通常显得很简洁,因为多次调用自身,所以运行效率较高,应该大力提倡用递归算法设计程序.( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "递归算法的效率不高,并不是首选算法,应该优先选择其他效率更高的算法.",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7648",
        "version": 0,
        "type": 3,
        "title": "同样的问题使用不同的算法编程解决,其时间复杂度可能不一样.( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "不同的算法,时间复杂度可能不一样.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "时间复杂度与空间复杂度",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7649",
        "version": 0,
        "type": 4,
        "title": "验证哥德巴赫猜想:任意一个大于等于4的偶数总可以分解为两个素数之和.请在下面的横线上补全代码,使得通过键盘输入一个偶数x(x<1000,输出这两个素数.如果有多组解,只需要输出一组,并且第一个素数要尽可能地小.例如,输入\"10\",输出\"3  7\";输入\"18\",输出\"5  13\". def prime(x): for i in range(2, x): if x%i == 0: return ① return 1 x=int(input(\"输入一个偶数x:\")) for k in range( ② ,x//2+1): if prime(k) and prime( ③ ): print( ④ ) break",
        "answer": "<p><span><strong>参考程序:</strong></span></p><p><span>def prime(x):</span></p><p><span>&nbsp; &nbsp; for i in range(2, x):</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; if x%i == 0:</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return</span><span>&nbsp;</span><span><strong>&nbsp;0</strong></span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; return 1</span><br><span>x=int(input(\"输入一个数x:\"))</span><br><span>for k in range(<span><strong>2</strong></span>,x//2+1):</span><br><span>&nbsp; &nbsp; if prime(k) and prime(<span><strong>x-k</strong></span>):</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; print(<span><strong>k,x-k</strong></span>)</span><br><span>&nbsp; &nbsp; &nbsp; &nbsp; break</span></p>",
        "analyzeContent": "评分标准: (1) 0 或等效答案 ;(3分) (2) 2 或等效答案 ;(3分) (3) x-k 或等效答案 ;  (3分) (4) k,x-k 或等效答案 .  (3分)",
        "examDots": "35,",
        "weType": 0,
        "isMySubject": 0,
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7651",
        "version": 0,
        "type": 4,
        "title": "回文数是指正序(从左向右)和倒序(从右向左)读都是一样的整数,例如12321,765567就是回文数.请补全下列代码,编程实现用分治的方法判断一个整数是否是回文数. def ispel(s): num = len( ① ) if num == 0: return False if num == 1: return True if num == 2: return s[0] == ② else: return s[0] == s[num - 1] and ispel(s[1: ③ ]) st = input(\"请输入一个整数:\") if ④ == True: print(\"输入的是回文数\") else: print(\"输入的不是回文数\")",
        "answer": "<p><strong><span>参考程序:</span></strong></p><p>def ispel(s):</p><p>&nbsp;&nbsp;&nbsp;&nbsp;num = len(<span>s</span>)&nbsp;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;if num == 0:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return False</p><p>&nbsp;&nbsp;&nbsp;&nbsp;if num == 1:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return True</p><p>&nbsp;&nbsp;&nbsp;&nbsp;if num == 2:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return s[0] ==&nbsp;<span>s[1]</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;else:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return s[0] == s[num - 1] and ispel(s[1:<span>num - 1</span>])</p><p>st = input(\"请输入一个整数:\")</p><p>if&nbsp;<span>ispel(st)</span>&nbsp;== True:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;print(\"输入的是回文数\")</p><p>else:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;print(\"输入的不是回文数\")</p>",
        "analyzeContent": "评分标准: ①  s或等效答案 ; ( 2分) ②  s[1]或等效答案 ; (2分) ③  num-1或等效答案 ; ( 2分) ④  ispel(st) 或等效答案. ( 2分)",
        "examDots": "35,",
        "weType": 0,
        "isMySubject": 0,
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "7652",
        "version": 0,
        "type": 4,
        "title": "小青蛙爬楼梯.楼梯有n级.小青蛙每次只能爬1级或2级. 当楼梯只有1级时,青蛙只有1种爬法. 当楼梯有2级时,青蛙有2种爬法:一次爬2级;一次爬1级,爬2次. 请从键盘上接收楼梯级数n,输出青蛙有几种爬法. 示例输入 请输入楼梯级数:8 示例输出 8级楼梯共有34种爬法. 程序如下: def Climb(n): if ① : return 1 elif n==2: ② else: return ③ n=int(input(\"请输入楼梯级数:\")) if n>0: print(\"%d级楼梯共有%d种爬法.\"%( ④ , ⑤ ))",
        "optionA": "参考程序: def Climb(n): if n==1: return 1 elif n==2: return 2 else: return Climb(n-1)+Climb(n-2) n=int(input(\"请输入楼梯级数:\")) if n>0: print(\"%d级楼梯共有%d种爬法.\"%(n,Climb(n)))",
        "answer": "<p><span><strong>参考程序:</strong></span></p><p>def Climb(n):<br>&nbsp; &nbsp; if n==1:<br>&nbsp; &nbsp; &nbsp; &nbsp; return 1<br>&nbsp; &nbsp; elif n==2:<br>&nbsp; &nbsp; &nbsp; &nbsp; return 2<br>&nbsp; &nbsp; else:<br>&nbsp; &nbsp; &nbsp; &nbsp; return Climb(n-1)+Climb(n-2)<br>n=int(input(\"请输入楼梯级数:\"))<br>if n&gt;0:<br>&nbsp; &nbsp; print(\"%d级楼梯共有%d种爬法.\"%(n,Climb(n)))</p>",
        "analyzeContent": "评分标准: ( 1)n==1;  ( 2 分) ( 2)return 2; ( 2 分) ( 3)Climb(n-1)+Climb(n-2); (2分) ( 4)n; (2分) ( 5 ) Climb(n).(2分)",
        "examDots": "35,",
        "weType": 0,
        "isMySubject": 0,
        "answerStatus": 0,
        "compileEnvironment": 0
      }
    ],
    "calculatePercentage": 0.0,
    "completeTime": "1",
    "answerScore": 0.0,
    "title": "202209Python四级真题",
    "averageScore": 14
  },
  "code": 200,
  "msg": "操作成功"
}