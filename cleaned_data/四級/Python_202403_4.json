{
  "data": {
    "averageCompleteTime": 677.0,
    "subjectList": [
      {
        "id": "10873",
        "version": 4,
        "type": 1,
        "title": "运行如下代码,若输入整数 3 ,则最终输出的结果为?( ) def f(x): if x==1: s=1 else: s=f(x-1)*x return s n=int(input(\" 请输入一个大于 1 的整数: \")) print(f(n)+f(n-1))",
        "optionA": "2",
        "optionB": "4",
        "optionC": "8",
        "optionD": "16",
        "answer": "C",
        "analyzeContent": "由于 f(3)=f(2)*3,f(2)=f(1)*2,f(1)=1, 所以 f(3)+f(2)=6+2=8 .",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10874",
        "version": 4,
        "type": 1,
        "title": "运行下列程序,输出的结果是?( ) def fun(x): if x > 3: return x * fun(x-1) else: return x print(fun(6))",
        "optionA": "120",
        "optionB": "360",
        "optionC": "720",
        "optionD": "60",
        "answer": "B",
        "analyzeContent": "递归函数求解,根据递归函数 6*5*4*3=360",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10875",
        "version": 4,
        "type": 1,
        "title": "下列关于递归的描述不正确的是?( )",
        "optionA": "递归函数一定包含 if 语句",
        "optionB": "递归函数体内一定包含调用自身的语句",
        "optionC": "在调用自身函数时需要明确的边界终止条件与边界值",
        "optionD": "递归算法一般代码简洁,执行效率高,空间复杂度低",
        "answer": "D",
        "analyzeContent": "递归算法一般代码简洁,易于理解,但执行效率较低,空间复杂度高.",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10876",
        "version": 4,
        "type": 1,
        "title": "运行下列程序,输出的结果是?( ) def fun(a, n): s = 0 for i in range(1, n+1): temp = str(a)*i s += int(temp) return s print(fun(1, 3))",
        "optionA": "3",
        "optionB": "6",
        "optionC": "12",
        "optionD": "123",
        "answer": "D",
        "analyzeContent": "递推函数求解,本题是求 1+11+111 之和.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10877",
        "version": 4,
        "type": 1,
        "title": "运行下列程序,输出的结果是?( ) def fun(a, b): s = 0 a = a[::-1] for i in range(len(a)): s += int(a[i])*b**i return s print(fun('45', 16))",
        "optionA": "69",
        "optionB": "45",
        "optionC": "64",
        "optionD": "61",
        "answer": "A",
        "analyzeContent": "递推函数求解,本题是根据一个字符串和进制,转换成对应的十进制.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10878",
        "version": 4,
        "type": 1,
        "title": "一个荷花池,第一天荷花开放得很少,第二天开放的数量是第一天的两倍,之后的每一天,荷花都会以前一天两倍的数量开放.如果到第 30 天,荷花就开满了整个池塘,设第一天开一朵,编程求第 30 天共开了多少朵荷花.下面空白处的代码填写正确的是?( ) s = 0 t = 1 for i in range(1, ① ): s += t ② print(s)",
        "optionA": "30, t = t*2",
        "optionB": "31, t = t*2",
        "optionC": "31, t+=2",
        "optionD": "30, t*=2",
        "answer": "B",
        "analyzeContent": "递推函数求解,本题递推关系是 t = t*2, 循环次数是 30 次.",
        "examDots": "35,",
        "difficultyLevel": "5",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用,递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10879",
        "version": 4,
        "type": 1,
        "title": "解决下列问题时,时间复杂度最大的是?( )",
        "optionA": "输入 n 个不同的包含两位小数的实数,计算这 n 个数的和",
        "optionB": "在 n 个数据中,查找数据 k",
        "optionC": "将 n 个数据用冒泡排序实现排序",
        "optionD": "计算算式 1-2+3-4+...-n 的结果, n 为偶数",
        "answer": "C",
        "analyzeContent": "算法优化.",
        "examDots": "35,",
        "difficultyLevel": "5",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "时间复杂度与空间复杂度,算法优化",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10880",
        "version": 4,
        "type": 1,
        "title": "以下关于分治算法的描述正确的是?( )",
        "optionA": "各个子问题既相互独立又相互联系",
        "optionB": "问题可以分解成若干个规模较小的相同问题",
        "optionC": "可以直接对问题进行求解",
        "optionD": "子问题的解不能合并成原问题的解",
        "answer": "B",
        "analyzeContent": "分治算法的特征,各个子问题相互独立,子问题的求解可以合并成原问题的解.",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "分治算法",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10881",
        "version": 4,
        "type": 1,
        "title": "下列选项中哪一项使用了分治算法?( )",
        "optionA": "二分搜索",
        "optionB": "选择搜索",
        "optionC": "插入搜索",
        "optionD": "顺序搜索",
        "answer": "A",
        "analyzeContent": "二分查找体现了分治算法.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "分治算法",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10882",
        "version": 7,
        "type": 1,
        "title": "不超过 20 个元素的降序数列,使用对分查找能找到指定的元素,可能的查找次数不包括?( )",
        "optionA": "3",
        "optionB": "4",
        "optionC": "5",
        "optionD": "6",
        "answer": "D",
        "analyzeContent": "",
        "examDots": "35,",
        "difficultyLevel": "5",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "分治算法",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10883",
        "version": 4,
        "type": 1,
        "title": "下面程序段的输出结果是?( ) def add_Run(L=None): if L is None: L = ['Lying'] else: L.append('Run') return L add_Run() print(add_Run()) print(add_Run(['Lying']))",
        "optionA": "'Lying'] ['Run']",
        "optionB": "['Lying'] ['Lying'] ['Lying', 'Run']",
        "optionC": "['Lying'] ['Lying', 'Run']",
        "optionD": "[] ['Lying', 'Run']",
        "answer": "C",
        "analyzeContent": "if 分支定义列表, else 分支添加列表元素.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "算法优化",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10884",
        "version": 4,
        "type": 1,
        "title": "下面关于计数器的程序,输出结果正确的是?( ) count = 0 def increment(): global count count += 1 print(\" 计数器的值: \", count) increment() increment() increment()",
        "optionA": "计数器的值: 1 计数器的值: 2 计数器的值: 3",
        "optionB": "计数器的值: 0 计数器的值: 1 计数器的值: 2",
        "optionC": "计数器的值: 1 计数器的值: 1 计数器的值: 1",
        "optionD": "计数器的值: 3",
        "answer": "A",
        "analyzeContent": "在函数内部可以通过关键字 global 来定义全局变量.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "全局变量和局部变量",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10885",
        "version": 4,
        "type": 1,
        "title": "下列程序段的输出结果是?( ) L = [] x = 3 def  test(x): L.append(x) x = 5 test(x) print('L = {}, x = {}'.format(L, x))",
        "optionA": "L = [3], x = 3",
        "optionB": "L = [5], x = 5",
        "optionC": "L = [3], x = 5",
        "optionD": "L = 3, x = 5",
        "answer": "A",
        "analyzeContent": "函数内部定义变量 x 的值为 5 ,只能作用于函数内部.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10886",
        "version": 4,
        "type": 1,
        "title": "以下程序,运行程序输出结果正确的是?( ) def demo(x): return x*2 print(demo(demo(1)))",
        "optionA": "return  None",
        "optionB": "2",
        "optionC": "4",
        "optionD": "8",
        "answer": "C",
        "analyzeContent": "调用二次, 1 乘以二次 2 ,因此结果为 4 .",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用,自定义函数的创建与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10887",
        "version": 4,
        "type": 1,
        "title": "Python 使用下列哪个函数接收用户输入的数据?( )",
        "optionA": "accept()",
        "optionB": "input()",
        "optionC": "print()",
        "optionD": "login()",
        "answer": "B",
        "analyzeContent": "在 Python 中 , 用于获取用户输入的函数是 input() .",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "算法优化",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10888",
        "version": 4,
        "type": 1,
        "title": "下面程序段的输出结果正确的是?( ) def  power(): x ='python' y = 'world' z = x + \" \" + y return z print(power())",
        "optionA": "z",
        "optionB": "x + \" \" + y",
        "optionC": "python world",
        "optionD": "python\" \"world",
        "answer": "C",
        "analyzeContent": "该函数作用为连接字符串.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10889",
        "version": 4,
        "type": 1,
        "title": "下列关于 Python 函数的描述中,不正确的是?( )",
        "optionA": "自定义函数时用到的关键字是 def",
        "optionB": "在 python 函数中,至少有一条 return 语句",
        "optionC": "函数 print ()可以一次输出多个参数,如 print('1',\"2\",3,[4])",
        "optionD": "用函数 eval ()可以用于求字符串里表达式的值,如 eval ( '3+5-1' )",
        "answer": "B",
        "analyzeContent": "函数可以有返回值,也可以没有返回值.需要返回值的函数,可以包含一条或者多条 return 语句;没有返回值的函数,不需要包含 return 语句.",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "自定义函数的创建与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10890",
        "version": 4,
        "type": 1,
        "title": "关于以下代码的描述中,正确的是?( ) # 求两个正方形的面积差 def MianJiCha(a,b): s=a**2-b**2 return s a=5 b=10 c=MianJiCha(b,a)+a",
        "optionA": "代码运行后,变量 c 的值是 80",
        "optionB": "函数名是 MianJiCha(a,b)",
        "optionC": "可以用 MianJiCha(100) 的形式调用此函数",
        "optionD": "代码运行时会报错",
        "answer": "A",
        "analyzeContent": "s=10**2-5**2+5=100-25+5=80",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10891",
        "version": 4,
        "type": 1,
        "title": "下列关于 Python 函数的说法中,错误的是?( )",
        "optionA": "利用函数可以降低编程复杂度,增加代码可读性",
        "optionB": "函数可以重复调用",
        "optionC": "函数可以降低修改代码的工作量",
        "optionD": "调用函数时,每次都必须输入相同的参数值",
        "answer": "D",
        "analyzeContent": "有些函数需要输入参数才能调用,有些不需要.需要输入参数的函数在多次调用时,允许输入合法的不同参数.这也正是函数可复用的实现形式.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10892",
        "version": 4,
        "type": 1,
        "title": "下列选项中,调用下列代码定义的函数时,程序会报错的是?( ) def ShuChu(a,b,c): print(c,b,a)",
        "optionA": "ShuChu('1','2','3')",
        "optionB": "ShuChu('1','2','3,4')",
        "optionC": "ShuChu(1,2,3)",
        "optionD": "ShuChu(1,2,3,4)",
        "answer": "D",
        "analyzeContent": "在使用位置实参的方式传值时,传入的实参个数必须与形参相同,否则运行程序会报错.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10893",
        "version": 4,
        "type": 1,
        "title": "下列选项中,调用以下代码定义的函数时,程序会报错的是?( ) def kp(a,b,c): print(a,b,c)",
        "optionA": "kp(1,b=2,3)",
        "optionB": "kp(a=3,b=1,c=2)",
        "optionC": "kp(1,2,3)",
        "optionD": "kp(1,b=2,c=3)",
        "answer": "A",
        "analyzeContent": "在函数调用时,采用位置实参与关键字实参混合传入参数时,位置实参必须放在关键字实参之前.",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念,自定义函数的创建与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10894",
        "version": 4,
        "type": 1,
        "title": "下列代码的输出结果是?( ) >>>s=lambda m,n:m*n >>>s(6,6)",
        "optionA": "6",
        "optionB": "6,6",
        "optionC": "36",
        "optionD": "12",
        "answer": "C",
        "analyzeContent": "匿名函数中,冒号前面是参数列表,冒号后面是函数的返回值. m=6,n=6,s=m*n=6*6=36",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "匿名函数",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10895",
        "version": 4,
        "type": 1,
        "title": "以下函数定义错误的选项是?( )",
        "optionA": "def aFunc(m,n): print(m,n)",
        "optionB": "def aFunc(m,n=2): print(m,n)",
        "optionC": "def aFunc(*m,n): print(m,n)",
        "optionD": "def aFunc(m,*n): print(m,n)",
        "answer": "C",
        "analyzeContent": "*m 表示是可变参数,可传入值的个数不确定.可变参数只能放在不可变参数的后面,不然解释器将不能识别哪些值传给可变参数,哪些值传给不可变参数.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "自定义函数的创建与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10896",
        "version": 4,
        "type": 1,
        "title": "用于安装 Python 第三方库的工具是?( )",
        "optionA": "install",
        "optionB": "pip",
        "optionC": "Wheel",
        "optionD": "setup",
        "answer": "B",
        "analyzeContent": "pip 是 Python 自带的第三方库的安装工具.",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "第三方库(模块)的获取,安装与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10897",
        "version": 4,
        "type": 1,
        "title": "编程时,如果只需要导入某第三方库中的某个成员,需要使用到的关键字是?( )",
        "optionA": "from",
        "optionB": "as",
        "optionC": "into",
        "optionD": "inport",
        "answer": "A",
        "analyzeContent": "导入外部模块的某个成员,使用 from 关键字.",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "第三方库(模块)的获取,安装与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10898",
        "version": 4,
        "type": 3,
        "title": "若某个问题既能用递归算法求解,又能用递推算法求解,则使用递归方法求解更容易,效率也高得多.( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "递归求解效率要低.",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10899",
        "version": 4,
        "type": 3,
        "title": "如下代码因为递归的边界条件设置错误,产生了无限递归程序报错.( ) def fun(n): if n > 10: return 0 else: return n + fun(n-1) print(fun(10))",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "递归的边界条件设置错误,产生了无限递归程序报错.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10900",
        "version": 4,
        "type": 3,
        "title": "算法的时间复杂度与空间复杂度没有必然关系.( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "算法的时间复杂度与空间复杂度没有必然关系.",
        "examDots": "35,",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "时间复杂度与空间复杂度",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10901",
        "version": 4,
        "type": 3,
        "title": "已知有 n 本按照书名拼音排序好的图书,使用对分查找法搜索其中任何一本书,最多查找次数为 4 次,则 n 的值有可能为 10 .( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "根据二分查找最坏查找次数可得.",
        "examDots": "35,",
        "difficultyLevel": "5",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "分治算法",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10902",
        "version": 4,
        "type": 3,
        "title": "函数定义语句 def  f(c=1,d=2,a,b): 是正确的,因为默认值形参要放在前面.( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "函数定义,默认值形参要放在后面.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10903",
        "version": 4,
        "type": 3,
        "title": "return 语句可以返回任何数据类型的值,包括整数,浮点数,字符串,列表,元组,字典等.( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "return 语句可以用于在函数执行结束后返回一个值.这个值可以是任何类型 , 例如整数,浮点数,字符串,列表等等.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的返回值",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10904",
        "version": 4,
        "type": 3,
        "title": "def ZiDian(**kwargs): print(kwargs) ZiDian(a=1) 运行上面的代码后,输出结果为 {'a':1} .( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "当不确定需要传入的值是多少时,在定义形参时,可以使用 *args (列表), **kwargs (字典)来表示.在元素前加上 ** 后,传入的值以字典的形式显示出来.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10905",
        "version": 4,
        "type": 3,
        "title": "以下代码可以正常运行 , 输出 8 .( ) def qh(a,b=3): print(a+b) qh(b=2,6)",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "在形参列表中必须先列出没有默认值的形参,再列出有默认值的形参.不然,程序会报错.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10906",
        "version": 4,
        "type": 3,
        "title": "代码 >>>lambda:x=2,y=3:x+y 的运行结果是 5 .( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "匿名函数中冒号前面的部分表示参数列表,不能有赋值语句,不然会报\" can't assign to lambda \"错误.",
        "examDots": "35,",
        "difficultyLevel": "5",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "匿名函数",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10907",
        "version": 4,
        "type": 3,
        "title": "使用 pip install --upgrade numpy 命令能够升级 numpy 科学计算库.( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "pip 的 install --upgrade numpy 指令用来升级外部模块.",
        "examDots": "35,",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "第三方库(模块)的获取,安装与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10908",
        "version": 4,
        "type": 4,
        "title": "数的分解 给出一个正整数 a ,要求分解成若干个正整数的乘积,即 a=a1 × a2 × a3 × ... × an ,并且 1<a1 ≤ a2 ≤ a3 ≤ ... ≤ an ,问这样分解的种类有多少.注意到 a=a 也是一种分解. 例如, 8 可以分解成 8=2*2*2,8=2*4,8=8 总共 3 种. 代码如下,完善划线处的代码: def fun(x, y=2): if x == 1: global ans ① for i in range(y, x+1): if ② : fun(x//i,i) lst = [2, 8, 9, 20] # 测试数据 for i in lst: ans = 0 ③ print(ans) 程序运行结果如下: 1 3 2 4",
        "answer": "<p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span>参考程序:</span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">def fun(x, y=2):</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; if x == 1:</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; &nbsp; &nbsp; global ans</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;ans += 1</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; for i in range(y, x+1):</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; &nbsp; &nbsp; if&nbsp;x % i == 0:</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fun(x//i, i)</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">lst = [2, 8, 9, 20]&nbsp;#</font><font face=\"宋体\">测试数据</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">for i in lst:</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; ans = 0</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp;&nbsp;fun(i)</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; print(ans)&nbsp;</font></span><span><o:p></o:p></span></p>",
        "analyzeContent": "评分标准: ( 1 ) ans += 1 或等效答案;( 2 分) ( 2 ) x % i == 0 或等效答案;( 3 分) ( 3 ) fun(i) 或等效答案.( 3 分)",
        "examDots": "35,",
        "weType": 0,
        "isMySubject": 0,
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10909",
        "version": 3,
        "type": 4,
        "title": "购物组合 小明单位发了 100 元的购物卡,小明到超市买三类洗化用品:洗发水( 15 元),香皂( 2 元),牙刷( 5 元).要把 100 元正好花掉,可有哪些购买组合? def  gouwu(money): for i in range(0,money//15+1): for j in range(0,money//2+1): for  k  in  range(0, ① ): if ② : print(' 可选择的购买组合 :\\t 购买洗发水 {} 瓶,香皂 {} 块,牙刷 {} 个. '.format( ③ )) gouwu(100)",
        "answer": "<p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span>参考程序:</span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">def&nbsp; gouwu(money):</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; &nbsp; for i in range(0,money//15+1):</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for j in range(0,money//2+1):</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for&nbsp; k&nbsp; in&nbsp; range(0,money//5+1):</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if&nbsp;i*15+j*2+k*5==money:</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;print('</font><font face=\"宋体\">可选择的购买组合</font><font face=\"Calibri\">:\\t</font><font face=\"宋体\">购买洗发水 </font><font face=\"Calibri\">{} </font><font face=\"宋体\">瓶,香皂 </font><font face=\"Calibri\">{} </font><font face=\"宋体\">块,牙刷 </font><font face=\"Calibri\">{}</font><font face=\"宋体\">个.</font><font face=\"Calibri\">'.format(i,j,k))</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">gouwu(100)</font></span><span><o:p></o:p></span></p>",
        "analyzeContent": "评分标准: ( 1 ) money//5+1 或等效答案;( 3 分) ( 2 ) i*15+j*2+k*5==money 或等效答案;( 4 分) ( 3 ) i,j,k 或等效答案.( 3 分)",
        "examDots": "35,",
        "weType": 0,
        "isMySubject": 0,
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "10910",
        "version": 3,
        "type": 4,
        "title": "回文素数 回文素数是指一个不小于 11 的自然数 n 从左向右和从右向左读,其结果值相同且是素数,即称 n 为回文素数.一种求解的方法是先判断一个自然数是否为回文数,再判断它是否为素数.如果两个判断都成立,则该自然数是回文素数.请补全代码,找出自然数 1000 以内的所有回文素数. # 判断是否为素数 def ① (n): for i in range(2,n): if ② : break else: return True # 判断是否为回文数 def HuiWenShu(n): n=str(n) if n== ③ : return True else: return False for i in range(11,1001): if ZhiShu(i)==True ④ : print('{} 是回文素数! '.format(i))",
        "answer": "<p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span>参考程序:</span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">#</font><font face=\"宋体\">判断是否为素数</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">def&nbsp;ZhiShu(n):&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; for i in range(2,n):</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; &nbsp; &nbsp; if&nbsp;n%i==0:</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; else:</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; &nbsp; &nbsp; return True</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span>&nbsp;</span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">#</font><font face=\"宋体\">判断是否为回文数</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">def HuiWenShu(n):</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; n=str(n)</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; if n==n[::-1]:</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; &nbsp; &nbsp; return True</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; else:</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; &nbsp; &nbsp; return False</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">for i in range(11,1001):</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; if ZhiShu(i)==True&nbsp;and HuiWenShu(i)==True:</font></span><span><o:p></o:p></span></p><p class=\"MsoNormal\" align=\"justify\" style=\"text-align: justify;\"><span><font face=\"Calibri\">&nbsp; &nbsp; &nbsp; &nbsp; print('{}</font><font face=\"宋体\">是回文素数!</font><font face=\"Calibri\">'.format(i))</font></span><span><o:p></o:p></span></p>",
        "analyzeContent": "评分标准: ( 1 ) ZhiShu 或等效答案;( 2 分) ( 2 ) n%i==0 或等效答案;( 2 分) ( 3 ) n[::-1] 或等效答案;( 4 分) ( 4 ) and HuiWenShu(i)==True 或等效答案.( 4 分)",
        "examDots": "35,",
        "weType": 0,
        "isMySubject": 0,
        "answerStatus": 0,
        "compileEnvironment": 0
      }
    ],
    "calculatePercentage": 0.0,
    "completeTime": "2",
    "answerScore": 0.0,
    "title": "202403Python四级真题",
    "averageScore": 16
  },
  "code": 200,
  "msg": "操作成功"
}