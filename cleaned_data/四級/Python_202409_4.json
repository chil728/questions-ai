{
  "data": {
    "averageCompleteTime": 552.0,
    "subjectList": [
      {
        "id": "1846457100465250306",
        "version": 0,
        "type": 1,
        "title": "一款经典的猜数字游戏:甲先在50以内随意写一个数字,乙开始猜,如果乙猜的比甲写的数大了,甲就说大了,反之,则说小了.请问根据对分查找思想,乙最多用多少次能猜出甲写的正确数字?( )",
        "optionA": "10",
        "optionB": "8",
        "optionC": "6",
        "optionD": "4",
        "answer": "C",
        "analyzeContent": "折半查找算法,因为答案所在范围区间为50以内的数字,50介于2^5(32)与2^6(64)之间,所以最大折半查次数是6.",
        "difficultyLevel": "5",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "分治算法",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846457231931514882",
        "version": 0,
        "type": 1,
        "title": "二分查找法是利用了哪种算法思想?( )",
        "optionA": "动态规划",
        "optionB": "分治算法",
        "optionC": "递推算法",
        "optionD": "递归算法",
        "answer": "B",
        "analyzeContent": "分治算法的基本思想是将一个规模为N的问题分解为K个规模较小的子问题,折半查找就是利用分治算法,不断缩小答案所在范围.",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "分治算法",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846457309960523777",
        "version": 0,
        "type": 1,
        "title": "运行下列程序后,输出的结果是?( ) def f(n): if(n==1): return 1 return n*f(n-1) print(f(5))",
        "optionA": "24",
        "optionB": "120",
        "optionC": "15",
        "optionD": "5",
        "answer": "B",
        "analyzeContent": "求n的阶乘.",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846457551327383554",
        "version": 0,
        "type": 1,
        "title": "下列定义计算圆周长的匿名函数中,正确的是?( )",
        "optionA": "lambda r : 2r*3.14",
        "optionB": "lambda r,3,14*2*r",
        "optionC": "rst = lambda r,3.14*r*2",
        "optionD": "rst = lambda r : 3.14*2*r",
        "answer": "D",
        "analyzeContent": "lambda函数.",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "匿名函数",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846457634297663489",
        "version": 0,
        "type": 1,
        "title": "有如下Python程序段,在调用函数sjc时实参是?( ) def sjc(x): a,b=1,1 print(a,b,x) sjc(20)",
        "optionA": "20",
        "optionB": "1",
        "optionC": "a",
        "optionD": "b",
        "answer": "A",
        "analyzeContent": "形参和实参.",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "形参和实参",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846457765451177985",
        "version": 0,
        "type": 1,
        "title": "下列有关匿名函数lambda的描述,错误的是?( )",
        "optionA": "lambda表达式可以包含一个表达式",
        "optionB": "在匿名函数中需要使用return来返回值",
        "optionC": "lambda表达式可以调用其他函数",
        "optionD": "定义匿名函数时,要将它赋值给一个变量",
        "answer": "B",
        "analyzeContent": "匿名函数.",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "匿名函数",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846457892129918978",
        "version": 0,
        "type": 1,
        "title": "下列程序,运行的结果是?( ) def qh(a,b,c=5): return a+b+c print(qh(5,10),qh(10,10,10))",
        "optionA": "15 25",
        "optionB": "20 25",
        "optionC": "20 30",
        "optionD": "15 30",
        "answer": "C",
        "analyzeContent": "形参和实参.",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "形参和实参",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846457996802969602",
        "version": 0,
        "type": 1,
        "title": "有如下Python程序段,执行该程序段后的结果是?( ) def area(r,pi=3.14): return r*r*pi print(area(3,10))",
        "optionA": "90",
        "optionB": "28.86",
        "optionC": "314",
        "optionD": "None",
        "answer": "A",
        "analyzeContent": "形参和实参.",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "形参和实参",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846458150336909313",
        "version": 0,
        "type": 1,
        "title": "fun函数可以传入的参数a不确定有多少个,划线处的代码正确的是?( ) def fun(___): pass",
        "optionA": "a",
        "optionB": "a[]",
        "optionC": "a()",
        "optionD": "*a",
        "answer": "D",
        "analyzeContent": "形参和实参.",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "形参和实参",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846462869816659969",
        "version": 0,
        "type": 1,
        "title": "请选择下面代码的输出结果是?( ) def f(n): n += 1 return n x = 10 y = f(x) print(y)",
        "optionA": "10",
        "optionB": "11",
        "optionC": "12",
        "optionD": "None",
        "answer": "B",
        "analyzeContent": "形参和实参.",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "形参和实参",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846472360645808130",
        "version": 0,
        "type": 1,
        "title": "执行如下Python程序,语句\"s=s+i\"被执行的次数是?( ) def f(n): s = 0 for i in range(1,n): if i % 3 == 0 or i % 2 == 0: s = s+i f(10)",
        "optionA": "5",
        "optionB": "6",
        "optionC": "7",
        "optionD": "8",
        "answer": "B",
        "analyzeContent": "9以内能被3整除或能被2整除的数有:2,3,4,6,8,9.",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "算法优化",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846472581083471873",
        "version": 0,
        "type": 1,
        "title": "有如下Python程序段,执行该程序后,输出的结果是?( ) def qh(n): s , f = 0,1 for i in range(1,n+1): s += f * i f = -f return s print(qh(4))",
        "optionA": "10",
        "optionB": "2",
        "optionC": "-2",
        "optionD": "-10",
        "answer": "C",
        "analyzeContent": "函数qy功能是计算1-2+3-4=-2.",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用,算法优化",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846472725713833986",
        "version": 0,
        "type": 1,
        "title": "有如下Python程序,运行后fac(a)函数被调用了几次?( ) def fac(a): if a == 1: return 1 else: return a + fac(a-1) print(fac(6))",
        "optionA": "5",
        "optionB": "6",
        "optionC": "7",
        "optionD": "8",
        "answer": "B",
        "analyzeContent": "递归函数调用.",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用,递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846473051608502273",
        "version": 0,
        "type": 1,
        "title": "Python中对已经安装的第三方库进行更新,使之升级到最新版本的pip指令是?( )",
        "optionA": "pip install <第三方库名>",
        "optionB": "pip install -U <第三方库名>",
        "optionC": "pip download <第三方库名>",
        "optionD": "pip search <第三方库名>",
        "answer": "B",
        "analyzeContent": "Python 第三方库的pip安装方法.",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "第三方库(模块)的获取,安装与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846473212909232129",
        "version": 0,
        "type": 1,
        "title": "Python中可以通过import math 语句导入math函数库,下列选项中可以实现向下取整的是?( )",
        "optionA": "math.ceil()",
        "optionB": "math.sqrt()",
        "optionC": "math.round()",
        "optionD": "math.floor()",
        "answer": "D",
        "analyzeContent": "floor()函数是math模块里的向下取整的函数.",
        "difficultyLevel": "5",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用,第三方库(模块)的获取,安装与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846474127538311170",
        "version": 0,
        "type": 1,
        "title": "以下代码的时间复杂度是多少?( ) i = 1 n = 100 while i < n: i = i * 2",
        "optionA": "O(n)",
        "optionB": "O(log2N)",
        "optionC": "O(n*n)",
        "optionD": "O(n2)",
        "answer": "B",
        "analyzeContent": "量级为对数阶,2^x=n,所以时间复杂度为O(log2N).",
        "difficultyLevel": "5",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "时间复杂度与空间复杂度",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846474258926325762",
        "version": 0,
        "type": 1,
        "title": "以下哪种函数一定是直接或间接调用函数本身的函数?( )",
        "optionA": "自定义函数",
        "optionB": "库函数",
        "optionC": "匿名函数",
        "optionD": "递归函数",
        "answer": "D",
        "analyzeContent": "考查递归函数的定义.",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846474371878932481",
        "version": 0,
        "type": 1,
        "title": "以下选项中关于递归算法的描述,错误的是?( )",
        "optionA": "代码简明",
        "optionB": "一定要有基例(指不需要递归就能求解得的解)",
        "optionC": "递归算法都可以用非递归的方法实现",
        "optionD": "自定义函数体通常使用循环程序结构",
        "answer": "D",
        "analyzeContent": "自定义函数体通常使用分支程序结构.",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846475652014448642",
        "version": 0,
        "type": 1,
        "title": "实现递推算法的核心程序结构通常是使用?( )",
        "optionA": "顺序结构",
        "optionB": "自定义函数",
        "optionC": "循环结构",
        "optionD": "分支结构",
        "answer": "C",
        "analyzeContent": "递推算法通常包含循环结构.",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846476656787509250",
        "version": 0,
        "type": 1,
        "title": "关于递归与递推算法,表述不准确的观点是?( )",
        "optionA": "递推算法在计算过程中利用已知条件,不断用变量的旧值递推出变量的新值,直至得到结果的算法",
        "optionB": "递推算法利用循环结构来实现",
        "optionC": "递归算法把问题转化为规模缩小了的同类问题的子问题,然后再递归调用函数或过程来求得问题的解",
        "optionD": "由于递归算法的实现代码简明精练,因此实际工作中要尽量采用递归算法解决问题,以提高工作效益",
        "answer": "D",
        "analyzeContent": "递归算法的实现代码简明,但执行效率低.",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846476956157779969",
        "version": 0,
        "type": 1,
        "title": "实际应用中,一般不采用递归的方法来解决层次或序列规模较大的计算问题,其原因是?( )",
        "optionA": "递归结束条件不易满足",
        "optionB": "代码变得复杂",
        "optionC": "运行过程容易出错",
        "optionD": "算法运行所需的空间消耗增大,运行效率下降很快",
        "answer": "D",
        "analyzeContent": "对于规模较大的计算问题,递归的效率很低.",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846477076504563714",
        "version": 0,
        "type": 1,
        "title": "运行下列Python程序后的结果是?( ) def f(n): n=n*2 return n a=[7,1] b=f(a) print(a,b)",
        "optionA": "[7,1],[7,1,7,1]",
        "optionB": "[7,1],[14,2]",
        "optionC": "[7,1],[7,1],[7,1]",
        "optionD": "[7,1],[7,1]",
        "answer": "A",
        "analyzeContent": "将列表[7,1]作为参数传入,列表乘以2,变为[7,1,7,1],作为返回值.",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846477208153935874",
        "version": 0,
        "type": 1,
        "title": "陈丽把自己每天的学习时间情况记录在文本文件\"record.txt\"中,现在她想用Python程序打开并读取某天的学习时间情况,请问打开文件的正确操作的是?( )",
        "optionA": "open('record.txt','r')",
        "optionB": "close('record.txt','r')",
        "optionC": "write('record.txt')",
        "optionD": "readline('record.txt')",
        "answer": "A",
        "analyzeContent": "使用Python内置函数open()可以打开一个文件,并返回一个文件对象.",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846477367249903617",
        "version": 0,
        "type": 1,
        "title": "小明设计了一个计算矩形体积的函数,以下调用函数的四个选项中,参数传递错误的是?( ) def vol(length,width,height): v = length * width * height return v",
        "optionA": "s = vol(3,4,7) print(s)",
        "optionB": "s = vol(3, 7,width=4) print(s)",
        "optionC": "s = vol(3,height=7,width=4) print(s)",
        "optionD": "s = vol(3, width=4,height=7) print(s)",
        "answer": "B",
        "analyzeContent": "Python可以用多种方式将实参传递给函数.默认按位置顺序将对应的实参传递给形参,必须按照定义时的顺序依次传入实参值.而关键字参数通过指定形参名来传递实参值,不需要考虑顺序.",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846477482429304833",
        "version": 0,
        "type": 1,
        "title": "小陈编写了一段计算超市打折活动的程序,运行时报错,原因可能是下面哪项?( ) def discount(price,rate): final_price = price * rate old_price = float ( input ('请输入原价:')) rate = float (input ('请输入折扣率:')) discount ( old_price , rate ) print ('打折后价格是:',final_price )",
        "optionA": "调用函数时参数传递错误,应该以参数名price传递",
        "optionB": "final_price是局部变量,只在函数体内生效",
        "optionC": "定义函数时,没有定义参数的类型",
        "optionD": "函数体没有return语句,函数执行完毕后返回结果为None",
        "answer": "B",
        "analyzeContent": "调用函数传递实参时,位置参数按顺序传入即可,不需要名称一致,也不需要定义参数类型;final_price是局部变量,只在函数体内生效,函数体外调用会出错.",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数使用,全局变量和局部变量",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846477525823954945",
        "version": 0,
        "type": 3,
        "title": "对数组进行快速排序是利用分治的思想,整个排序过程可以递归进行,算法效率高效,是一种稳定的排序算法,时间复杂度为O(nlogn).( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "快速排序是不稳定的排序算法.",
        "difficultyLevel": "5",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "时间复杂度与空间复杂度",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846477558690521089",
        "version": 0,
        "type": 3,
        "title": "把实现相同功能的代码作为一个代码块封装在一起,形成函数.( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "函数的意义.",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846477599345528833",
        "version": 0,
        "type": 3,
        "title": "调用函数时如果位置实参和关键字实参两种方式混用,位置实参必须要放在关键字实参之前.( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "函数中形参和实参的调用.",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "形参和实参",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846477637008936962",
        "version": 0,
        "type": 3,
        "title": "有如下Python程序段,运行该程序段后,将提示错误.( ) def js(x=3,y): print(x,y) js(10)",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "函数的形参和实参.",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "形参和实参",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846477683043246082",
        "version": 0,
        "type": 3,
        "title": "我们可以通过import模块的方法安装Python第三方库. ( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "安装Python第三方库的3种方法为:(1)使用pip命令(2)集成安装方法(3)文件安装方法.",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "第三方库(模块)的获取,安装与调用",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846477737621901314",
        "version": 0,
        "type": 3,
        "title": "如果执行算法所需的临时空间不会随变量的变化而变化,那么该算法的空间复杂度为一个常量.( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "如果执行算法所需的临时空间不会随变量的变化而变化,那么该算法的空间复杂度为一个常量O(1).",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846477776683454466",
        "version": 0,
        "type": 3,
        "title": "递归函数中,一定要包含对自身的调用,而且一定要有终止条件.",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "考查递归函数的退出条件.",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846477806762631170",
        "version": 0,
        "type": 3,
        "title": "递推算法设计时,首要任务是寻找规律,确定递推表达式,从而求解问题.( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "1",
        "analyzeContent": "考查递推算法设计步骤.",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "递归与递推",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846477838400266242",
        "version": 0,
        "type": 3,
        "title": "在Python语法中,全局变量只能在主程序中使用,局部变量只能在局部函数中可用.( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "全局变量能在主程序与各自定义函数中均可使用.当局部变量与全局变量同名时,局部变量屏蔽全局变量.",
        "difficultyLevel": "4",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "全局变量和局部变量",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846477883648036866",
        "version": 0,
        "type": 3,
        "title": "Python自定义函数时,传递参数的数量必须是明确的.( )",
        "optionA": "",
        "optionB": "",
        "optionC": "",
        "optionD": "",
        "answer": "0",
        "analyzeContent": "有时候一个函数需要处理的参数个数是不确定的,这个时候,可以使用多值参数.",
        "difficultyLevel": "3",
        "weType": 0,
        "isMySubject": 0,
        "knowledgeNames": "函数的相关概念",
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846478014525657089",
        "version": 0,
        "type": 4,
        "title": "日期问题 小明同学学习Python的函数后,想动手利用函数来解决生活中的问题.于是他突发奇想,输入日期,统计这一天是这一年的第几天.其中,闰年指年份能被4整除但不能被100整除,或者仅能够被400整除.编写的代码如下,请完善划线处的代码. def isRn(year):           #判断year是否闰年 if         ①        or year % 400 == 0: return 1 return 0 def jsDays(data):         #计算日期data在这一年是第几天 s = 0 year = int(data[:4]) month = int(data[4:6]) day = int(data[6:]) for i in range(        ②        ): s += days[i] s += day if month > 2 and        ③        : s += 1 return s def checkRq(data):      #判断输入的日期是否正确 month = int(data[4:6]) day = int(data[6:]) if month <1 or month >12: return 0 if days[month-1]<day or day <1: return 0 return 1 days = [31,28,31,30,31,30,31,31,30,31,30,31]    #定义每个月的天数 rq = input('输入年月日,格式如:20240102\\n') if checkRq(rq): d =         ④ print(rq,'是这一年的第',d,'天') else: print(rq,'输入的日期有错误')",
        "analyzeContent": "标准答案: 参考程序: def isRn(year):           #判断year是否闰年 if year % 4 ==0 and year % 100 != 0 or year % 400 == 0: return 1 return 0 def jsDays(data):         #计算日期data在这一年是第几天 s = 0 year = int(data[:4]) month = int(data[4:6]) day = int(data[6:]) for i in range(month-1): s += days[i] s += day if month > 2 and isRn(year): s += 1 return s def checkRq(data):      #判断输入的日期是否正确 month = int(data[4:6]) day = int(data[6:]) if month <1 or month >12: return 0 if days[month-1]<day or day <1: return 0 return 1 days = [31,28,31,30,31,30,31,31,30,31,30,31]    #定义每个月的天数 rq = input('输入年月日,格式如:20240102\\n') if checkRq(rq): d = jsDays(rq) print(rq,'是这一年的第',d,'天') else: print(rq,'输入的日期有错误') 评分标准: (1)year % 4 == 0 and year % 100 != 0 或等效答案;(3分) (2)month-1 或等效答案;(3分) (3)isRn(year) 或等效答案;(3分) (4)jsDays(rq) 或等效答案.(3分)",
        "weType": 0,
        "isMySubject": 0,
        "answerStatus": 0,
        "compileEnvironment": 0
      },
      {
        "id": "1846478096937164802",
        "version": 0,
        "type": 4,
        "title": "数学游戏 校园里流行一种新的数学游戏:每次邀请两个同学参加,第一个同学先从1和2中挑一个数字,第二个同学可以在对方的基础上选择加1或者加2,然后又轮到第一个同学,他也可以选择加1或者加2,之后再把选择权交给对方,就这样交替地选择加1或者加2,谁先加到20,谁就赢了.小智编写了以下程序,分析总共存在多少种可能出现的情形.请补充完成该程序. def act(n): if n == 1 or        ①        : return 1 sn =         ② return         ③ tn = act(        ④        )",
        "analyzeContent": "标准答案: 参考程序: def act(n): if n == 1 or n == 2: return 1 sn = act(n-1) + act(n-2) return sn tn = act(20) print(\"总共存在%d种可能出现的情形.\"%tn) 试题解析: 评分标准: (1)n == 2 或等效答案;(2分) (2)act(n-1) + act(n-2) 或等效答案;(2分) (3)sn 或等效答案;(2分) (4)20 或等效答案.(2分)",
        "weType": 0,
        "isMySubject": 0,
        "answerStatus": 0,
        "compileEnvironment": 0
      }
    ],
    "calculatePercentage": 0.0,
    "completeTime": "1",
    "answerScore": 0.0,
    "title": "202409Python四级真题",
    "averageScore": 15
  },
  "code": 200,
  "msg": "操作成功"
}